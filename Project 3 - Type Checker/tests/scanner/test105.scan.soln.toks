fun (* test105.lgf:3.0-test105.lgf:3.3 *)
(* VAR_NAME *) intToString (* test105.lgf:3.4-test105.lgf:3.15 *)
( (* test105.lgf:3.16-test105.lgf:3.17 *)
(* VAR_NAME *) i (* test105.lgf:3.17-test105.lgf:3.18 *)
: (* test105.lgf:3.18-test105.lgf:3.19 *)
(* CON_NAME *) Integer (* test105.lgf:3.19-test105.lgf:3.26 *)
) (* test105.lgf:3.26-test105.lgf:3.27 *)
: (* test105.lgf:3.28-test105.lgf:3.29 *)
(* CON_NAME *) String (* test105.lgf:3.30-test105.lgf:3.36 *)
= (* test105.lgf:3.37-test105.lgf:3.38 *)
if (* test105.lgf:4.3-test105.lgf:4.5 *)
(* VAR_NAME *) i (* test105.lgf:4.6-test105.lgf:4.7 *)
< (* test105.lgf:4.8-test105.lgf:4.9 *)
(* INTEGER *) 0 (* test105.lgf:4.10-test105.lgf:4.11 *)
then (* test105.lgf:4.12-test105.lgf:4.16 *)
(* STRING *) "~" (* test105.lgf:4.17-test105.lgf:4.20 *)
^ (* test105.lgf:4.21-test105.lgf:4.22 *)
( (* test105.lgf:4.23-test105.lgf:4.24 *)
(* VAR_NAME *) intToString (* test105.lgf:4.24-test105.lgf:4.35 *)
( (* test105.lgf:4.36-test105.lgf:4.37 *)
~ (* test105.lgf:4.37-test105.lgf:4.38 *)
(* VAR_NAME *) i (* test105.lgf:4.38-test105.lgf:4.39 *)
) (* test105.lgf:4.39-test105.lgf:4.40 *)
) (* test105.lgf:4.40-test105.lgf:4.41 *)
else (* test105.lgf:5.3-test105.lgf:5.7 *)
if (* test105.lgf:5.8-test105.lgf:5.10 *)
(* VAR_NAME *) i (* test105.lgf:5.11-test105.lgf:5.12 *)
== (* test105.lgf:5.13-test105.lgf:5.15 *)
(* INTEGER *) 0 (* test105.lgf:5.16-test105.lgf:5.17 *)
then (* test105.lgf:5.18-test105.lgf:5.22 *)
(* STRING *) "0" (* test105.lgf:5.23-test105.lgf:5.26 *)
else (* test105.lgf:6.3-test105.lgf:6.7 *)
if (* test105.lgf:6.8-test105.lgf:6.10 *)
(* VAR_NAME *) i (* test105.lgf:6.11-test105.lgf:6.12 *)
== (* test105.lgf:6.13-test105.lgf:6.15 *)
(* INTEGER *) 1 (* test105.lgf:6.16-test105.lgf:6.17 *)
then (* test105.lgf:6.18-test105.lgf:6.22 *)
(* STRING *) "1" (* test105.lgf:6.23-test105.lgf:6.26 *)
else (* test105.lgf:7.3-test105.lgf:7.7 *)
if (* test105.lgf:7.8-test105.lgf:7.10 *)
(* VAR_NAME *) i (* test105.lgf:7.11-test105.lgf:7.12 *)
== (* test105.lgf:7.13-test105.lgf:7.15 *)
(* INTEGER *) 2 (* test105.lgf:7.16-test105.lgf:7.17 *)
then (* test105.lgf:7.18-test105.lgf:7.22 *)
(* STRING *) "2" (* test105.lgf:7.23-test105.lgf:7.26 *)
else (* test105.lgf:8.3-test105.lgf:8.7 *)
if (* test105.lgf:8.8-test105.lgf:8.10 *)
(* VAR_NAME *) i (* test105.lgf:8.11-test105.lgf:8.12 *)
== (* test105.lgf:8.13-test105.lgf:8.15 *)
(* INTEGER *) 3 (* test105.lgf:8.16-test105.lgf:8.17 *)
then (* test105.lgf:8.18-test105.lgf:8.22 *)
(* STRING *) "3" (* test105.lgf:8.23-test105.lgf:8.26 *)
else (* test105.lgf:9.3-test105.lgf:9.7 *)
if (* test105.lgf:9.8-test105.lgf:9.10 *)
(* VAR_NAME *) i (* test105.lgf:9.11-test105.lgf:9.12 *)
== (* test105.lgf:9.13-test105.lgf:9.15 *)
(* INTEGER *) 4 (* test105.lgf:9.16-test105.lgf:9.17 *)
then (* test105.lgf:9.18-test105.lgf:9.22 *)
(* STRING *) "4" (* test105.lgf:9.23-test105.lgf:9.26 *)
else (* test105.lgf:10.3-test105.lgf:10.7 *)
if (* test105.lgf:10.8-test105.lgf:10.10 *)
(* VAR_NAME *) i (* test105.lgf:10.11-test105.lgf:10.12 *)
== (* test105.lgf:10.13-test105.lgf:10.15 *)
(* INTEGER *) 5 (* test105.lgf:10.16-test105.lgf:10.17 *)
then (* test105.lgf:10.18-test105.lgf:10.22 *)
(* STRING *) "5" (* test105.lgf:10.23-test105.lgf:10.26 *)
else (* test105.lgf:11.3-test105.lgf:11.7 *)
if (* test105.lgf:11.8-test105.lgf:11.10 *)
(* VAR_NAME *) i (* test105.lgf:11.11-test105.lgf:11.12 *)
== (* test105.lgf:11.13-test105.lgf:11.15 *)
(* INTEGER *) 6 (* test105.lgf:11.16-test105.lgf:11.17 *)
then (* test105.lgf:11.18-test105.lgf:11.22 *)
(* STRING *) "6" (* test105.lgf:11.23-test105.lgf:11.26 *)
else (* test105.lgf:12.3-test105.lgf:12.7 *)
if (* test105.lgf:12.8-test105.lgf:12.10 *)
(* VAR_NAME *) i (* test105.lgf:12.11-test105.lgf:12.12 *)
== (* test105.lgf:12.13-test105.lgf:12.15 *)
(* INTEGER *) 7 (* test105.lgf:12.16-test105.lgf:12.17 *)
then (* test105.lgf:12.18-test105.lgf:12.22 *)
(* STRING *) "7" (* test105.lgf:12.23-test105.lgf:12.26 *)
else (* test105.lgf:13.3-test105.lgf:13.7 *)
if (* test105.lgf:13.8-test105.lgf:13.10 *)
(* VAR_NAME *) i (* test105.lgf:13.11-test105.lgf:13.12 *)
== (* test105.lgf:13.13-test105.lgf:13.15 *)
(* INTEGER *) 8 (* test105.lgf:13.16-test105.lgf:13.17 *)
then (* test105.lgf:13.18-test105.lgf:13.22 *)
(* STRING *) "8" (* test105.lgf:13.23-test105.lgf:13.26 *)
else (* test105.lgf:14.3-test105.lgf:14.7 *)
if (* test105.lgf:14.8-test105.lgf:14.10 *)
(* VAR_NAME *) i (* test105.lgf:14.11-test105.lgf:14.12 *)
== (* test105.lgf:14.13-test105.lgf:14.15 *)
(* INTEGER *) 9 (* test105.lgf:14.16-test105.lgf:14.17 *)
then (* test105.lgf:14.18-test105.lgf:14.22 *)
(* STRING *) "9" (* test105.lgf:14.23-test105.lgf:14.26 *)
else (* test105.lgf:15.3-test105.lgf:15.7 *)
( (* test105.lgf:15.8-test105.lgf:15.9 *)
(* VAR_NAME *) intToString (* test105.lgf:15.9-test105.lgf:15.20 *)
( (* test105.lgf:15.21-test105.lgf:15.22 *)
(* VAR_NAME *) i (* test105.lgf:15.22-test105.lgf:15.23 *)
/ (* test105.lgf:15.24-test105.lgf:15.25 *)
(* INTEGER *) 10 (* test105.lgf:15.26-test105.lgf:15.28 *)
) (* test105.lgf:15.28-test105.lgf:15.29 *)
) (* test105.lgf:15.29-test105.lgf:15.30 *)
^ (* test105.lgf:15.31-test105.lgf:15.32 *)
( (* test105.lgf:15.33-test105.lgf:15.34 *)
(* VAR_NAME *) intToString (* test105.lgf:15.34-test105.lgf:15.45 *)
( (* test105.lgf:15.46-test105.lgf:15.47 *)
(* VAR_NAME *) i (* test105.lgf:15.47-test105.lgf:15.48 *)
% (* test105.lgf:15.49-test105.lgf:15.50 *)
(* INTEGER *) 10 (* test105.lgf:15.51-test105.lgf:15.53 *)
) (* test105.lgf:15.53-test105.lgf:15.54 *)
) (* test105.lgf:15.54-test105.lgf:15.55 *)
datatype (* test105.lgf:17.0-test105.lgf:17.8 *)
(* CON_NAME *) Option (* test105.lgf:17.9-test105.lgf:17.15 *)
[ (* test105.lgf:17.16-test105.lgf:17.17 *)
(* TYVAR_NAME *) 'a (* test105.lgf:17.17-test105.lgf:17.19 *)
] (* test105.lgf:17.19-test105.lgf:17.20 *)
= (* test105.lgf:17.21-test105.lgf:17.22 *)
(* CON_NAME *) None (* test105.lgf:17.23-test105.lgf:17.27 *)
| (* test105.lgf:17.28-test105.lgf:17.29 *)
(* CON_NAME *) Some (* test105.lgf:17.30-test105.lgf:17.34 *)
{ (* test105.lgf:17.35-test105.lgf:17.36 *)
(* TYVAR_NAME *) 'a (* test105.lgf:17.36-test105.lgf:17.38 *)
} (* test105.lgf:17.38-test105.lgf:17.39 *)
fun (* test105.lgf:19.0-test105.lgf:19.3 *)
(* VAR_NAME *) optionToString (* test105.lgf:19.4-test105.lgf:19.18 *)
[ (* test105.lgf:19.19-test105.lgf:19.20 *)
(* TYVAR_NAME *) 'a (* test105.lgf:19.20-test105.lgf:19.22 *)
] (* test105.lgf:19.22-test105.lgf:19.23 *)
( (* test105.lgf:19.24-test105.lgf:19.25 *)
(* VAR_NAME *) aToString (* test105.lgf:19.25-test105.lgf:19.34 *)
: (* test105.lgf:19.34-test105.lgf:19.35 *)
(* TYVAR_NAME *) 'a (* test105.lgf:19.36-test105.lgf:19.38 *)
-> (* test105.lgf:19.39-test105.lgf:19.41 *)
(* CON_NAME *) String (* test105.lgf:19.42-test105.lgf:19.48 *)
) (* test105.lgf:19.48-test105.lgf:19.49 *)
( (* test105.lgf:19.50-test105.lgf:19.51 *)
(* VAR_NAME *) opt (* test105.lgf:19.51-test105.lgf:19.54 *)
: (* test105.lgf:19.54-test105.lgf:19.55 *)
(* CON_NAME *) Option (* test105.lgf:19.56-test105.lgf:19.62 *)
[ (* test105.lgf:19.63-test105.lgf:19.64 *)
(* TYVAR_NAME *) 'a (* test105.lgf:19.64-test105.lgf:19.66 *)
] (* test105.lgf:19.66-test105.lgf:19.67 *)
) (* test105.lgf:19.67-test105.lgf:19.68 *)
: (* test105.lgf:19.69-test105.lgf:19.70 *)
(* CON_NAME *) String (* test105.lgf:19.71-test105.lgf:19.77 *)
= (* test105.lgf:19.78-test105.lgf:19.79 *)
case (* test105.lgf:20.2-test105.lgf:20.6 *)
(* VAR_NAME *) opt (* test105.lgf:20.7-test105.lgf:20.10 *)
of (* test105.lgf:20.11-test105.lgf:20.13 *)
(* CON_NAME *) None (* test105.lgf:21.5-test105.lgf:21.9 *)
[ (* test105.lgf:21.10-test105.lgf:21.11 *)
(* TYVAR_NAME *) 'a (* test105.lgf:21.11-test105.lgf:21.13 *)
] (* test105.lgf:21.13-test105.lgf:21.14 *)
=> (* test105.lgf:21.15-test105.lgf:21.17 *)
(* STRING *) "None" (* test105.lgf:21.18-test105.lgf:21.24 *)
| (* test105.lgf:22.3-test105.lgf:22.4 *)
(* CON_NAME *) Some (* test105.lgf:22.5-test105.lgf:22.9 *)
[ (* test105.lgf:22.10-test105.lgf:22.11 *)
(* TYVAR_NAME *) 'a (* test105.lgf:22.11-test105.lgf:22.13 *)
] (* test105.lgf:22.13-test105.lgf:22.14 *)
{ (* test105.lgf:22.15-test105.lgf:22.16 *)
(* VAR_NAME *) x (* test105.lgf:22.16-test105.lgf:22.17 *)
} (* test105.lgf:22.17-test105.lgf:22.18 *)
=> (* test105.lgf:22.19-test105.lgf:22.21 *)
(* STRING *) "Some {" (* test105.lgf:22.22-test105.lgf:22.30 *)
^ (* test105.lgf:22.31-test105.lgf:22.32 *)
( (* test105.lgf:22.33-test105.lgf:22.34 *)
(* VAR_NAME *) aToString (* test105.lgf:22.34-test105.lgf:22.43 *)
(* VAR_NAME *) x (* test105.lgf:22.44-test105.lgf:22.45 *)
) (* test105.lgf:22.45-test105.lgf:22.46 *)
^ (* test105.lgf:22.47-test105.lgf:22.48 *)
(* STRING *) "}" (* test105.lgf:22.49-test105.lgf:22.52 *)
end (* test105.lgf:23.2-test105.lgf:23.5 *)
val (* test105.lgf:25.0-test105.lgf:25.3 *)
(* VAR_NAME *) ord0 (* test105.lgf:25.4-test105.lgf:25.8 *)
= (* test105.lgf:25.9-test105.lgf:25.10 *)
(* VAR_NAME *) subscript (* test105.lgf:25.11-test105.lgf:25.20 *)
(* STRING *) "0" (* test105.lgf:25.21-test105.lgf:25.24 *)
(* INTEGER *) 0 (* test105.lgf:25.25-test105.lgf:25.26 *)
val (* test105.lgf:26.0-test105.lgf:26.3 *)
(* VAR_NAME *) ord9 (* test105.lgf:26.4-test105.lgf:26.8 *)
= (* test105.lgf:26.9-test105.lgf:26.10 *)
(* VAR_NAME *) subscript (* test105.lgf:26.11-test105.lgf:26.20 *)
(* STRING *) "9" (* test105.lgf:26.21-test105.lgf:26.24 *)
(* INTEGER *) 0 (* test105.lgf:26.25-test105.lgf:26.26 *)
fun (* test105.lgf:28.0-test105.lgf:28.3 *)
(* VAR_NAME *) charToDigit (* test105.lgf:28.4-test105.lgf:28.15 *)
( (* test105.lgf:28.16-test105.lgf:28.17 *)
(* VAR_NAME *) c (* test105.lgf:28.17-test105.lgf:28.18 *)
: (* test105.lgf:28.18-test105.lgf:28.19 *)
(* CON_NAME *) Integer (* test105.lgf:28.20-test105.lgf:28.27 *)
) (* test105.lgf:28.27-test105.lgf:28.28 *)
: (* test105.lgf:28.29-test105.lgf:28.30 *)
(* CON_NAME *) Option (* test105.lgf:28.31-test105.lgf:28.37 *)
[ (* test105.lgf:28.38-test105.lgf:28.39 *)
(* CON_NAME *) Integer (* test105.lgf:28.39-test105.lgf:28.46 *)
] (* test105.lgf:28.46-test105.lgf:28.47 *)
= (* test105.lgf:28.48-test105.lgf:28.49 *)
if (* test105.lgf:29.2-test105.lgf:29.4 *)
(* VAR_NAME *) ord0 (* test105.lgf:29.5-test105.lgf:29.9 *)
<= (* test105.lgf:29.10-test105.lgf:29.12 *)
(* VAR_NAME *) c (* test105.lgf:29.13-test105.lgf:29.14 *)
andalso (* test105.lgf:29.15-test105.lgf:29.22 *)
(* VAR_NAME *) c (* test105.lgf:29.23-test105.lgf:29.24 *)
<= (* test105.lgf:29.25-test105.lgf:29.27 *)
(* VAR_NAME *) ord9 (* test105.lgf:29.28-test105.lgf:29.32 *)
then (* test105.lgf:30.4-test105.lgf:30.8 *)
(* CON_NAME *) Some (* test105.lgf:30.9-test105.lgf:30.13 *)
[ (* test105.lgf:30.14-test105.lgf:30.15 *)
(* CON_NAME *) Integer (* test105.lgf:30.15-test105.lgf:30.22 *)
] (* test105.lgf:30.22-test105.lgf:30.23 *)
{ (* test105.lgf:30.24-test105.lgf:30.25 *)
(* VAR_NAME *) c (* test105.lgf:30.25-test105.lgf:30.26 *)
- (* test105.lgf:30.27-test105.lgf:30.28 *)
(* VAR_NAME *) ord0 (* test105.lgf:30.29-test105.lgf:30.33 *)
} (* test105.lgf:30.33-test105.lgf:30.34 *)
else (* test105.lgf:31.4-test105.lgf:31.8 *)
(* CON_NAME *) None (* test105.lgf:31.9-test105.lgf:31.13 *)
[ (* test105.lgf:31.14-test105.lgf:31.15 *)
(* CON_NAME *) Integer (* test105.lgf:31.15-test105.lgf:31.22 *)
] (* test105.lgf:31.22-test105.lgf:31.23 *)
fun (* test105.lgf:33.0-test105.lgf:33.3 *)
(* VAR_NAME *) stringToInt (* test105.lgf:33.4-test105.lgf:33.15 *)
( (* test105.lgf:33.16-test105.lgf:33.17 *)
(* VAR_NAME *) s (* test105.lgf:33.17-test105.lgf:33.18 *)
: (* test105.lgf:33.19-test105.lgf:33.20 *)
(* CON_NAME *) String (* test105.lgf:33.21-test105.lgf:33.27 *)
) (* test105.lgf:33.27-test105.lgf:33.28 *)
: (* test105.lgf:33.29-test105.lgf:33.30 *)
(* CON_NAME *) Option (* test105.lgf:33.31-test105.lgf:33.37 *)
[ (* test105.lgf:33.38-test105.lgf:33.39 *)
(* CON_NAME *) Integer (* test105.lgf:33.39-test105.lgf:33.46 *)
] (* test105.lgf:33.46-test105.lgf:33.47 *)
= (* test105.lgf:33.48-test105.lgf:33.49 *)
let (* test105.lgf:34.2-test105.lgf:34.5 *)
val (* test105.lgf:35.4-test105.lgf:35.7 *)
(* VAR_NAME *) sz (* test105.lgf:35.8-test105.lgf:35.10 *)
= (* test105.lgf:35.11-test105.lgf:35.12 *)
(* VAR_NAME *) size (* test105.lgf:35.13-test105.lgf:35.17 *)
(* VAR_NAME *) s (* test105.lgf:35.18-test105.lgf:35.19 *)
fun (* test105.lgf:36.4-test105.lgf:36.7 *)
(* VAR_NAME *) loop (* test105.lgf:36.8-test105.lgf:36.12 *)
( (* test105.lgf:36.13-test105.lgf:36.14 *)
(* VAR_NAME *) pos (* test105.lgf:36.14-test105.lgf:36.17 *)
: (* test105.lgf:36.17-test105.lgf:36.18 *)
(* CON_NAME *) Integer (* test105.lgf:36.19-test105.lgf:36.26 *)
) (* test105.lgf:36.26-test105.lgf:36.27 *)
( (* test105.lgf:36.28-test105.lgf:36.29 *)
(* VAR_NAME *) acc (* test105.lgf:36.29-test105.lgf:36.32 *)
: (* test105.lgf:36.32-test105.lgf:36.33 *)
(* CON_NAME *) Integer (* test105.lgf:36.34-test105.lgf:36.41 *)
) (* test105.lgf:36.41-test105.lgf:36.42 *)
: (* test105.lgf:36.43-test105.lgf:36.44 *)
(* CON_NAME *) Option (* test105.lgf:36.45-test105.lgf:36.51 *)
[ (* test105.lgf:36.52-test105.lgf:36.53 *)
(* CON_NAME *) Integer (* test105.lgf:36.53-test105.lgf:36.60 *)
] (* test105.lgf:36.60-test105.lgf:36.61 *)
= (* test105.lgf:36.62-test105.lgf:36.63 *)
if (* test105.lgf:37.6-test105.lgf:37.8 *)
(* VAR_NAME *) pos (* test105.lgf:37.9-test105.lgf:37.12 *)
< (* test105.lgf:37.13-test105.lgf:37.14 *)
(* VAR_NAME *) sz (* test105.lgf:37.15-test105.lgf:37.17 *)
then (* test105.lgf:38.8-test105.lgf:38.12 *)
case (* test105.lgf:38.13-test105.lgf:38.17 *)
(* VAR_NAME *) charToDigit (* test105.lgf:38.18-test105.lgf:38.29 *)
( (* test105.lgf:38.30-test105.lgf:38.31 *)
(* VAR_NAME *) subscript (* test105.lgf:38.31-test105.lgf:38.40 *)
(* VAR_NAME *) s (* test105.lgf:38.41-test105.lgf:38.42 *)
(* VAR_NAME *) pos (* test105.lgf:38.43-test105.lgf:38.46 *)
) (* test105.lgf:38.46-test105.lgf:38.47 *)
of (* test105.lgf:38.48-test105.lgf:38.50 *)
(* CON_NAME *) None (* test105.lgf:39.16-test105.lgf:39.20 *)
[ (* test105.lgf:39.21-test105.lgf:39.22 *)
(* CON_NAME *) Integer (* test105.lgf:39.22-test105.lgf:39.29 *)
] (* test105.lgf:39.29-test105.lgf:39.30 *)
=> (* test105.lgf:39.31-test105.lgf:39.33 *)
(* CON_NAME *) None (* test105.lgf:39.34-test105.lgf:39.38 *)
[ (* test105.lgf:39.39-test105.lgf:39.40 *)
(* CON_NAME *) Integer (* test105.lgf:39.40-test105.lgf:39.47 *)
] (* test105.lgf:39.47-test105.lgf:39.48 *)
| (* test105.lgf:40.14-test105.lgf:40.15 *)
(* CON_NAME *) Some (* test105.lgf:40.16-test105.lgf:40.20 *)
[ (* test105.lgf:40.21-test105.lgf:40.22 *)
(* CON_NAME *) Integer (* test105.lgf:40.22-test105.lgf:40.29 *)
] (* test105.lgf:40.29-test105.lgf:40.30 *)
{ (* test105.lgf:40.31-test105.lgf:40.32 *)
(* VAR_NAME *) i (* test105.lgf:40.32-test105.lgf:40.33 *)
} (* test105.lgf:40.33-test105.lgf:40.34 *)
=> (* test105.lgf:40.35-test105.lgf:40.37 *)
(* VAR_NAME *) loop (* test105.lgf:40.38-test105.lgf:40.42 *)
( (* test105.lgf:40.43-test105.lgf:40.44 *)
(* VAR_NAME *) pos (* test105.lgf:40.44-test105.lgf:40.47 *)
+ (* test105.lgf:40.48-test105.lgf:40.49 *)
(* INTEGER *) 1 (* test105.lgf:40.50-test105.lgf:40.51 *)
) (* test105.lgf:40.51-test105.lgf:40.52 *)
( (* test105.lgf:40.53-test105.lgf:40.54 *)
(* VAR_NAME *) acc (* test105.lgf:40.54-test105.lgf:40.57 *)
* (* test105.lgf:40.58-test105.lgf:40.59 *)
(* INTEGER *) 10 (* test105.lgf:40.60-test105.lgf:40.62 *)
+ (* test105.lgf:40.63-test105.lgf:40.64 *)
(* VAR_NAME *) i (* test105.lgf:40.65-test105.lgf:40.66 *)
) (* test105.lgf:40.66-test105.lgf:40.67 *)
end (* test105.lgf:41.13-test105.lgf:41.16 *)
else (* test105.lgf:42.6-test105.lgf:42.10 *)
(* CON_NAME *) Some (* test105.lgf:42.11-test105.lgf:42.15 *)
[ (* test105.lgf:42.16-test105.lgf:42.17 *)
(* CON_NAME *) Integer (* test105.lgf:42.17-test105.lgf:42.24 *)
] (* test105.lgf:42.24-test105.lgf:42.25 *)
{ (* test105.lgf:42.26-test105.lgf:42.27 *)
(* VAR_NAME *) acc (* test105.lgf:42.27-test105.lgf:42.30 *)
} (* test105.lgf:42.30-test105.lgf:42.31 *)
in (* test105.lgf:43.2-test105.lgf:43.4 *)
if (* test105.lgf:44.4-test105.lgf:44.6 *)
(* VAR_NAME *) sz (* test105.lgf:44.7-test105.lgf:44.9 *)
> (* test105.lgf:44.10-test105.lgf:44.11 *)
(* INTEGER *) 0 (* test105.lgf:44.12-test105.lgf:44.13 *)
then (* test105.lgf:45.6-test105.lgf:45.10 *)
(* VAR_NAME *) loop (* test105.lgf:45.11-test105.lgf:45.15 *)
(* INTEGER *) 0 (* test105.lgf:45.16-test105.lgf:45.17 *)
(* INTEGER *) 0 (* test105.lgf:45.18-test105.lgf:45.19 *)
else (* test105.lgf:46.4-test105.lgf:46.8 *)
(* CON_NAME *) None (* test105.lgf:46.9-test105.lgf:46.13 *)
[ (* test105.lgf:46.14-test105.lgf:46.15 *)
(* CON_NAME *) Integer (* test105.lgf:46.15-test105.lgf:46.22 *)
] (* test105.lgf:46.22-test105.lgf:46.23 *)
end (* test105.lgf:47.2-test105.lgf:47.5 *)
val (* test105.lgf:49.0-test105.lgf:49.3 *)
(* VAR_NAME *) s (* test105.lgf:49.4-test105.lgf:49.5 *)
= (* test105.lgf:49.6-test105.lgf:49.7 *)
if (* test105.lgf:50.2-test105.lgf:50.4 *)
(* VAR_NAME *) argc (* test105.lgf:50.5-test105.lgf:50.9 *)
(* CON_NAME *) Unit (* test105.lgf:50.10-test105.lgf:50.14 *)
> (* test105.lgf:50.15-test105.lgf:50.16 *)
(* INTEGER *) 1 (* test105.lgf:50.17-test105.lgf:50.18 *)
then (* test105.lgf:51.5-test105.lgf:51.9 *)
(* VAR_NAME *) arg (* test105.lgf:51.10-test105.lgf:51.13 *)
(* INTEGER *) 1 (* test105.lgf:51.14-test105.lgf:51.15 *)
else (* test105.lgf:52.2-test105.lgf:52.6 *)
(* STRING *) "12345" (* test105.lgf:52.7-test105.lgf:52.14 *)
; (* test105.lgf:54.0-test105.lgf:54.1 *)
( (* test105.lgf:56.0-test105.lgf:56.1 *)
(* VAR_NAME *) print (* test105.lgf:56.1-test105.lgf:56.6 *)
( (* test105.lgf:56.7-test105.lgf:56.8 *)
(* VAR_NAME *) optionToString (* test105.lgf:56.8-test105.lgf:56.22 *)
[ (* test105.lgf:56.23-test105.lgf:56.24 *)
(* CON_NAME *) Integer (* test105.lgf:56.24-test105.lgf:56.31 *)
] (* test105.lgf:56.31-test105.lgf:56.32 *)
(* VAR_NAME *) intToString (* test105.lgf:56.33-test105.lgf:56.44 *)
( (* test105.lgf:56.45-test105.lgf:56.46 *)
(* VAR_NAME *) stringToInt (* test105.lgf:56.46-test105.lgf:56.57 *)
(* VAR_NAME *) s (* test105.lgf:56.58-test105.lgf:56.59 *)
) (* test105.lgf:56.59-test105.lgf:56.60 *)
) (* test105.lgf:56.60-test105.lgf:56.61 *)
; (* test105.lgf:56.61-test105.lgf:56.62 *)
(* VAR_NAME *) print (* test105.lgf:57.1-test105.lgf:57.6 *)
(* STRING *) "\n" (* test105.lgf:57.7-test105.lgf:57.11 *)
) (* test105.lgf:57.11-test105.lgf:57.12 *)
