fun (* test107.lgf:3.0-test107.lgf:3.3 *)
(* VAR_NAME *) intToString (* test107.lgf:3.4-test107.lgf:3.15 *)
( (* test107.lgf:3.16-test107.lgf:3.17 *)
(* VAR_NAME *) i (* test107.lgf:3.17-test107.lgf:3.18 *)
: (* test107.lgf:3.18-test107.lgf:3.19 *)
(* CON_NAME *) Integer (* test107.lgf:3.19-test107.lgf:3.26 *)
) (* test107.lgf:3.26-test107.lgf:3.27 *)
: (* test107.lgf:3.28-test107.lgf:3.29 *)
(* CON_NAME *) String (* test107.lgf:3.30-test107.lgf:3.36 *)
= (* test107.lgf:3.37-test107.lgf:3.38 *)
if (* test107.lgf:4.3-test107.lgf:4.5 *)
(* VAR_NAME *) i (* test107.lgf:4.6-test107.lgf:4.7 *)
< (* test107.lgf:4.8-test107.lgf:4.9 *)
(* INTEGER *) 0 (* test107.lgf:4.10-test107.lgf:4.11 *)
then (* test107.lgf:4.12-test107.lgf:4.16 *)
(* STRING *) "~" (* test107.lgf:4.17-test107.lgf:4.20 *)
^ (* test107.lgf:4.21-test107.lgf:4.22 *)
( (* test107.lgf:4.23-test107.lgf:4.24 *)
(* VAR_NAME *) intToString (* test107.lgf:4.24-test107.lgf:4.35 *)
( (* test107.lgf:4.36-test107.lgf:4.37 *)
~ (* test107.lgf:4.37-test107.lgf:4.38 *)
(* VAR_NAME *) i (* test107.lgf:4.38-test107.lgf:4.39 *)
) (* test107.lgf:4.39-test107.lgf:4.40 *)
) (* test107.lgf:4.40-test107.lgf:4.41 *)
else (* test107.lgf:5.3-test107.lgf:5.7 *)
if (* test107.lgf:5.8-test107.lgf:5.10 *)
(* VAR_NAME *) i (* test107.lgf:5.11-test107.lgf:5.12 *)
== (* test107.lgf:5.13-test107.lgf:5.15 *)
(* INTEGER *) 0 (* test107.lgf:5.16-test107.lgf:5.17 *)
then (* test107.lgf:5.18-test107.lgf:5.22 *)
(* STRING *) "0" (* test107.lgf:5.23-test107.lgf:5.26 *)
else (* test107.lgf:6.3-test107.lgf:6.7 *)
if (* test107.lgf:6.8-test107.lgf:6.10 *)
(* VAR_NAME *) i (* test107.lgf:6.11-test107.lgf:6.12 *)
== (* test107.lgf:6.13-test107.lgf:6.15 *)
(* INTEGER *) 1 (* test107.lgf:6.16-test107.lgf:6.17 *)
then (* test107.lgf:6.18-test107.lgf:6.22 *)
(* STRING *) "1" (* test107.lgf:6.23-test107.lgf:6.26 *)
else (* test107.lgf:7.3-test107.lgf:7.7 *)
if (* test107.lgf:7.8-test107.lgf:7.10 *)
(* VAR_NAME *) i (* test107.lgf:7.11-test107.lgf:7.12 *)
== (* test107.lgf:7.13-test107.lgf:7.15 *)
(* INTEGER *) 2 (* test107.lgf:7.16-test107.lgf:7.17 *)
then (* test107.lgf:7.18-test107.lgf:7.22 *)
(* STRING *) "2" (* test107.lgf:7.23-test107.lgf:7.26 *)
else (* test107.lgf:8.3-test107.lgf:8.7 *)
if (* test107.lgf:8.8-test107.lgf:8.10 *)
(* VAR_NAME *) i (* test107.lgf:8.11-test107.lgf:8.12 *)
== (* test107.lgf:8.13-test107.lgf:8.15 *)
(* INTEGER *) 3 (* test107.lgf:8.16-test107.lgf:8.17 *)
then (* test107.lgf:8.18-test107.lgf:8.22 *)
(* STRING *) "3" (* test107.lgf:8.23-test107.lgf:8.26 *)
else (* test107.lgf:9.3-test107.lgf:9.7 *)
if (* test107.lgf:9.8-test107.lgf:9.10 *)
(* VAR_NAME *) i (* test107.lgf:9.11-test107.lgf:9.12 *)
== (* test107.lgf:9.13-test107.lgf:9.15 *)
(* INTEGER *) 4 (* test107.lgf:9.16-test107.lgf:9.17 *)
then (* test107.lgf:9.18-test107.lgf:9.22 *)
(* STRING *) "4" (* test107.lgf:9.23-test107.lgf:9.26 *)
else (* test107.lgf:10.3-test107.lgf:10.7 *)
if (* test107.lgf:10.8-test107.lgf:10.10 *)
(* VAR_NAME *) i (* test107.lgf:10.11-test107.lgf:10.12 *)
== (* test107.lgf:10.13-test107.lgf:10.15 *)
(* INTEGER *) 5 (* test107.lgf:10.16-test107.lgf:10.17 *)
then (* test107.lgf:10.18-test107.lgf:10.22 *)
(* STRING *) "5" (* test107.lgf:10.23-test107.lgf:10.26 *)
else (* test107.lgf:11.3-test107.lgf:11.7 *)
if (* test107.lgf:11.8-test107.lgf:11.10 *)
(* VAR_NAME *) i (* test107.lgf:11.11-test107.lgf:11.12 *)
== (* test107.lgf:11.13-test107.lgf:11.15 *)
(* INTEGER *) 6 (* test107.lgf:11.16-test107.lgf:11.17 *)
then (* test107.lgf:11.18-test107.lgf:11.22 *)
(* STRING *) "6" (* test107.lgf:11.23-test107.lgf:11.26 *)
else (* test107.lgf:12.3-test107.lgf:12.7 *)
if (* test107.lgf:12.8-test107.lgf:12.10 *)
(* VAR_NAME *) i (* test107.lgf:12.11-test107.lgf:12.12 *)
== (* test107.lgf:12.13-test107.lgf:12.15 *)
(* INTEGER *) 7 (* test107.lgf:12.16-test107.lgf:12.17 *)
then (* test107.lgf:12.18-test107.lgf:12.22 *)
(* STRING *) "7" (* test107.lgf:12.23-test107.lgf:12.26 *)
else (* test107.lgf:13.3-test107.lgf:13.7 *)
if (* test107.lgf:13.8-test107.lgf:13.10 *)
(* VAR_NAME *) i (* test107.lgf:13.11-test107.lgf:13.12 *)
== (* test107.lgf:13.13-test107.lgf:13.15 *)
(* INTEGER *) 8 (* test107.lgf:13.16-test107.lgf:13.17 *)
then (* test107.lgf:13.18-test107.lgf:13.22 *)
(* STRING *) "8" (* test107.lgf:13.23-test107.lgf:13.26 *)
else (* test107.lgf:14.3-test107.lgf:14.7 *)
if (* test107.lgf:14.8-test107.lgf:14.10 *)
(* VAR_NAME *) i (* test107.lgf:14.11-test107.lgf:14.12 *)
== (* test107.lgf:14.13-test107.lgf:14.15 *)
(* INTEGER *) 9 (* test107.lgf:14.16-test107.lgf:14.17 *)
then (* test107.lgf:14.18-test107.lgf:14.22 *)
(* STRING *) "9" (* test107.lgf:14.23-test107.lgf:14.26 *)
else (* test107.lgf:15.3-test107.lgf:15.7 *)
( (* test107.lgf:15.8-test107.lgf:15.9 *)
(* VAR_NAME *) intToString (* test107.lgf:15.9-test107.lgf:15.20 *)
( (* test107.lgf:15.21-test107.lgf:15.22 *)
(* VAR_NAME *) i (* test107.lgf:15.22-test107.lgf:15.23 *)
/ (* test107.lgf:15.24-test107.lgf:15.25 *)
(* INTEGER *) 10 (* test107.lgf:15.26-test107.lgf:15.28 *)
) (* test107.lgf:15.28-test107.lgf:15.29 *)
) (* test107.lgf:15.29-test107.lgf:15.30 *)
^ (* test107.lgf:15.31-test107.lgf:15.32 *)
( (* test107.lgf:15.33-test107.lgf:15.34 *)
(* VAR_NAME *) intToString (* test107.lgf:15.34-test107.lgf:15.45 *)
( (* test107.lgf:15.46-test107.lgf:15.47 *)
(* VAR_NAME *) i (* test107.lgf:15.47-test107.lgf:15.48 *)
% (* test107.lgf:15.49-test107.lgf:15.50 *)
(* INTEGER *) 10 (* test107.lgf:15.51-test107.lgf:15.53 *)
) (* test107.lgf:15.53-test107.lgf:15.54 *)
) (* test107.lgf:15.54-test107.lgf:15.55 *)
fun (* test107.lgf:17.0-test107.lgf:17.3 *)
(* VAR_NAME *) boolToString (* test107.lgf:17.4-test107.lgf:17.16 *)
( (* test107.lgf:17.17-test107.lgf:17.18 *)
(* VAR_NAME *) b (* test107.lgf:17.18-test107.lgf:17.19 *)
: (* test107.lgf:17.19-test107.lgf:17.20 *)
(* CON_NAME *) Bool (* test107.lgf:17.21-test107.lgf:17.25 *)
) (* test107.lgf:17.25-test107.lgf:17.26 *)
: (* test107.lgf:17.27-test107.lgf:17.28 *)
(* CON_NAME *) String (* test107.lgf:17.29-test107.lgf:17.35 *)
= (* test107.lgf:17.36-test107.lgf:17.37 *)
if (* test107.lgf:18.2-test107.lgf:18.4 *)
(* VAR_NAME *) b (* test107.lgf:18.5-test107.lgf:18.6 *)
then (* test107.lgf:18.7-test107.lgf:18.11 *)
(* STRING *) "True" (* test107.lgf:18.12-test107.lgf:18.18 *)
else (* test107.lgf:18.19-test107.lgf:18.23 *)
(* STRING *) "False" (* test107.lgf:18.24-test107.lgf:18.31 *)
val (* test107.lgf:20.0-test107.lgf:20.3 *)
(* VAR_NAME *) zero (* test107.lgf:20.4-test107.lgf:20.8 *)
= (* test107.lgf:20.9-test107.lgf:20.10 *)
(* INTEGER *) 0 (* test107.lgf:20.11-test107.lgf:20.12 *)
val (* test107.lgf:22.0-test107.lgf:22.3 *)
(* VAR_NAME *) one (* test107.lgf:22.4-test107.lgf:22.7 *)
= (* test107.lgf:22.8-test107.lgf:22.9 *)
(* INTEGER *) 1 (* test107.lgf:22.10-test107.lgf:22.11 *)
fun (* test107.lgf:24.0-test107.lgf:24.3 *)
(* VAR_NAME *) even (* test107.lgf:24.4-test107.lgf:24.8 *)
( (* test107.lgf:24.9-test107.lgf:24.10 *)
(* VAR_NAME *) x (* test107.lgf:24.10-test107.lgf:24.11 *)
: (* test107.lgf:24.11-test107.lgf:24.12 *)
(* CON_NAME *) Integer (* test107.lgf:24.12-test107.lgf:24.19 *)
) (* test107.lgf:24.19-test107.lgf:24.20 *)
: (* test107.lgf:24.21-test107.lgf:24.22 *)
(* CON_NAME *) Bool (* test107.lgf:24.23-test107.lgf:24.27 *)
= (* test107.lgf:24.28-test107.lgf:24.29 *)
if (* test107.lgf:25.3-test107.lgf:25.5 *)
(* VAR_NAME *) x (* test107.lgf:25.6-test107.lgf:25.7 *)
< (* test107.lgf:25.8-test107.lgf:25.9 *)
(* VAR_NAME *) zero (* test107.lgf:25.10-test107.lgf:25.14 *)
then (* test107.lgf:25.15-test107.lgf:25.19 *)
(* VAR_NAME *) even (* test107.lgf:25.20-test107.lgf:25.24 *)
( (* test107.lgf:25.25-test107.lgf:25.26 *)
~ (* test107.lgf:25.26-test107.lgf:25.27 *)
(* VAR_NAME *) x (* test107.lgf:25.27-test107.lgf:25.28 *)
) (* test107.lgf:25.28-test107.lgf:25.29 *)
else (* test107.lgf:25.30-test107.lgf:25.34 *)
if (* test107.lgf:25.35-test107.lgf:25.37 *)
(* VAR_NAME *) x (* test107.lgf:25.38-test107.lgf:25.39 *)
== (* test107.lgf:25.40-test107.lgf:25.42 *)
(* INTEGER *) 0 (* test107.lgf:25.43-test107.lgf:25.44 *)
then (* test107.lgf:25.45-test107.lgf:25.49 *)
(* CON_NAME *) True (* test107.lgf:25.50-test107.lgf:25.54 *)
else (* test107.lgf:25.55-test107.lgf:25.59 *)
(* VAR_NAME *) odd (* test107.lgf:25.60-test107.lgf:25.63 *)
( (* test107.lgf:25.64-test107.lgf:25.65 *)
(* VAR_NAME *) x (* test107.lgf:25.65-test107.lgf:25.66 *)
- (* test107.lgf:25.67-test107.lgf:25.68 *)
(* VAR_NAME *) one (* test107.lgf:25.69-test107.lgf:25.72 *)
) (* test107.lgf:25.72-test107.lgf:25.73 *)
and (* test107.lgf:26.0-test107.lgf:26.3 *)
(* VAR_NAME *) odd (* test107.lgf:26.4-test107.lgf:26.7 *)
( (* test107.lgf:26.8-test107.lgf:26.9 *)
(* VAR_NAME *) x (* test107.lgf:26.9-test107.lgf:26.10 *)
: (* test107.lgf:26.10-test107.lgf:26.11 *)
(* CON_NAME *) Integer (* test107.lgf:26.11-test107.lgf:26.18 *)
) (* test107.lgf:26.18-test107.lgf:26.19 *)
: (* test107.lgf:26.20-test107.lgf:26.21 *)
(* CON_NAME *) Bool (* test107.lgf:26.22-test107.lgf:26.26 *)
= (* test107.lgf:26.27-test107.lgf:26.28 *)
if (* test107.lgf:27.3-test107.lgf:27.5 *)
(* VAR_NAME *) x (* test107.lgf:27.6-test107.lgf:27.7 *)
< (* test107.lgf:27.8-test107.lgf:27.9 *)
(* VAR_NAME *) zero (* test107.lgf:27.10-test107.lgf:27.14 *)
then (* test107.lgf:27.15-test107.lgf:27.19 *)
(* VAR_NAME *) odd (* test107.lgf:27.20-test107.lgf:27.23 *)
( (* test107.lgf:27.24-test107.lgf:27.25 *)
~ (* test107.lgf:27.25-test107.lgf:27.26 *)
(* VAR_NAME *) x (* test107.lgf:27.26-test107.lgf:27.27 *)
) (* test107.lgf:27.27-test107.lgf:27.28 *)
else (* test107.lgf:27.29-test107.lgf:27.33 *)
if (* test107.lgf:27.34-test107.lgf:27.36 *)
(* VAR_NAME *) x (* test107.lgf:27.37-test107.lgf:27.38 *)
== (* test107.lgf:27.39-test107.lgf:27.41 *)
(* INTEGER *) 0 (* test107.lgf:27.42-test107.lgf:27.43 *)
then (* test107.lgf:27.44-test107.lgf:27.48 *)
(* CON_NAME *) False (* test107.lgf:27.49-test107.lgf:27.54 *)
else (* test107.lgf:27.55-test107.lgf:27.59 *)
(* VAR_NAME *) even (* test107.lgf:27.60-test107.lgf:27.64 *)
( (* test107.lgf:27.65-test107.lgf:27.66 *)
(* VAR_NAME *) x (* test107.lgf:27.66-test107.lgf:27.67 *)
- (* test107.lgf:27.68-test107.lgf:27.69 *)
(* VAR_NAME *) one (* test107.lgf:27.70-test107.lgf:27.73 *)
) (* test107.lgf:27.73-test107.lgf:27.74 *)
val (* test107.lgf:29.0-test107.lgf:29.3 *)
(* VAR_NAME *) n (* test107.lgf:29.4-test107.lgf:29.5 *)
= (* test107.lgf:29.6-test107.lgf:29.7 *)
(* INTEGER *) 101 (* test107.lgf:29.8-test107.lgf:29.11 *)
val (* test107.lgf:30.0-test107.lgf:30.3 *)
(* VAR_NAME *) even_n (* test107.lgf:30.4-test107.lgf:30.10 *)
= (* test107.lgf:30.11-test107.lgf:30.12 *)
(* VAR_NAME *) even (* test107.lgf:30.13-test107.lgf:30.17 *)
(* VAR_NAME *) n (* test107.lgf:30.18-test107.lgf:30.19 *)
; (* test107.lgf:32.0-test107.lgf:32.1 *)
( (* test107.lgf:33.0-test107.lgf:33.1 *)
(* VAR_NAME *) print (* test107.lgf:33.1-test107.lgf:33.6 *)
(* STRING *) "even " (* test107.lgf:33.7-test107.lgf:33.14 *)
; (* test107.lgf:33.14-test107.lgf:33.15 *)
(* VAR_NAME *) print (* test107.lgf:34.1-test107.lgf:34.6 *)
( (* test107.lgf:34.7-test107.lgf:34.8 *)
(* VAR_NAME *) intToString (* test107.lgf:34.8-test107.lgf:34.19 *)
(* VAR_NAME *) n (* test107.lgf:34.20-test107.lgf:34.21 *)
) (* test107.lgf:34.21-test107.lgf:34.22 *)
; (* test107.lgf:34.22-test107.lgf:34.23 *)
(* VAR_NAME *) print (* test107.lgf:35.1-test107.lgf:35.6 *)
(* STRING *) " = " (* test107.lgf:35.7-test107.lgf:35.12 *)
; (* test107.lgf:35.12-test107.lgf:35.13 *)
(* VAR_NAME *) print (* test107.lgf:36.1-test107.lgf:36.6 *)
( (* test107.lgf:36.7-test107.lgf:36.8 *)
(* VAR_NAME *) boolToString (* test107.lgf:36.8-test107.lgf:36.20 *)
(* VAR_NAME *) even_n (* test107.lgf:36.21-test107.lgf:36.27 *)
) (* test107.lgf:36.27-test107.lgf:36.28 *)
; (* test107.lgf:36.28-test107.lgf:36.29 *)
(* VAR_NAME *) print (* test107.lgf:37.1-test107.lgf:37.6 *)
(* STRING *) "\n" (* test107.lgf:37.7-test107.lgf:37.11 *)
) (* test107.lgf:37.11-test107.lgf:37.12 *)
