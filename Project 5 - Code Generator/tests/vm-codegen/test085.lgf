(* evaluation order *)
val a = array [Integer] 2 0
val _ = a ! 0 := 1
val _ = a ! 1 := 2
fun updA (u: Unit) : Unit =
  (a ! 0 := 2 * (a ! 0) + (a ! 1) ; Unit)
fun updB (u: Unit) : Unit =
  (a ! 1 := 3 * (a ! 1) + (a ! 0) ; Unit)

val n = (updA Unit; print "Hello "; fn (x: Integer) => x) (updB Unit; print "world!"; 3)
val _ = print "\n"

val m = (updA Unit; print "Hello "; 2) + (updB Unit; print "world!"; 3)
val _ = print "\n"

val b = (updA Unit; print "Hello "; 20) >= (updB Unit; print "world!"; 3)
val _ = print "\n"

datatype Pair ['a, 'b] = Pair {'a, 'b}

val p = Pair [Integer, Integer]
             {(updA Unit; print "Hello "; n), (updB Unit; print "world!"; m)}
val _ = print "\n"

val z = case p of Pair [Integer, Integer] {n, m} => if b then n * m else n + m end

fun intToString (i:Integer) : String =
   if i == ~1073741824 then "~1073741824"
   else if i < 0 then "~" ^ (intToString (~i))
   else if i == 0 then "0"
   else if i == 1 then "1"
   else if i == 2 then "2"
   else if i == 3 then "3"
   else if i == 4 then "4"
   else if i == 5 then "5"
   else if i == 6 then "6"
   else if i == 7 then "7"
   else if i == 8 then "8"
   else if i == 9 then "9"
   else (intToString (i / 10)) ^ (intToString (i % 10))

fun arrayToString ['a] (aToString: 'a -> String) (a: Array ['a]) : String =
  if # a == 0
    then "[]"
  else
    let
      fun loop (i: Integer) (acc: String) : String =
        if i < # a
          then loop (i + 1) (acc ^ ", " ^ (aToString (a ! i)))
        else acc
    in
       (loop 1 ("[" ^ (aToString (a ! 0)))) ^ "]"
    end

;

print ("a = " ^ (arrayToString [Integer] intToString a) ^ "\n")
