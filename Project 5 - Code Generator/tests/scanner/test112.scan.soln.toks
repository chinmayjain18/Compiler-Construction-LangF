datatype (* test112.lgf:1.0-test112.lgf:1.8 *)
(* CON_NAME *) Option (* test112.lgf:1.9-test112.lgf:1.15 *)
[ (* test112.lgf:1.16-test112.lgf:1.17 *)
(* TYVAR_NAME *) 'a (* test112.lgf:1.17-test112.lgf:1.19 *)
] (* test112.lgf:1.19-test112.lgf:1.20 *)
= (* test112.lgf:1.21-test112.lgf:1.22 *)
(* CON_NAME *) None (* test112.lgf:1.23-test112.lgf:1.27 *)
| (* test112.lgf:1.28-test112.lgf:1.29 *)
(* CON_NAME *) Some (* test112.lgf:1.30-test112.lgf:1.34 *)
{ (* test112.lgf:1.35-test112.lgf:1.36 *)
(* TYVAR_NAME *) 'a (* test112.lgf:1.36-test112.lgf:1.38 *)
} (* test112.lgf:1.38-test112.lgf:1.39 *)
fun (* test112.lgf:5.0-test112.lgf:5.3 *)
(* VAR_NAME *) intToString (* test112.lgf:5.4-test112.lgf:5.15 *)
( (* test112.lgf:5.16-test112.lgf:5.17 *)
(* VAR_NAME *) i (* test112.lgf:5.17-test112.lgf:5.18 *)
: (* test112.lgf:5.18-test112.lgf:5.19 *)
(* CON_NAME *) Integer (* test112.lgf:5.19-test112.lgf:5.26 *)
) (* test112.lgf:5.26-test112.lgf:5.27 *)
: (* test112.lgf:5.28-test112.lgf:5.29 *)
(* CON_NAME *) String (* test112.lgf:5.30-test112.lgf:5.36 *)
= (* test112.lgf:5.37-test112.lgf:5.38 *)
if (* test112.lgf:6.3-test112.lgf:6.5 *)
(* VAR_NAME *) i (* test112.lgf:6.6-test112.lgf:6.7 *)
< (* test112.lgf:6.8-test112.lgf:6.9 *)
(* INTEGER *) 0 (* test112.lgf:6.10-test112.lgf:6.11 *)
then (* test112.lgf:6.12-test112.lgf:6.16 *)
(* STRING *) "~" (* test112.lgf:6.17-test112.lgf:6.20 *)
^ (* test112.lgf:6.21-test112.lgf:6.22 *)
( (* test112.lgf:6.23-test112.lgf:6.24 *)
(* VAR_NAME *) intToString (* test112.lgf:6.24-test112.lgf:6.35 *)
( (* test112.lgf:6.36-test112.lgf:6.37 *)
~ (* test112.lgf:6.37-test112.lgf:6.38 *)
(* VAR_NAME *) i (* test112.lgf:6.38-test112.lgf:6.39 *)
) (* test112.lgf:6.39-test112.lgf:6.40 *)
) (* test112.lgf:6.40-test112.lgf:6.41 *)
else (* test112.lgf:7.3-test112.lgf:7.7 *)
if (* test112.lgf:7.8-test112.lgf:7.10 *)
(* VAR_NAME *) i (* test112.lgf:7.11-test112.lgf:7.12 *)
== (* test112.lgf:7.13-test112.lgf:7.15 *)
(* INTEGER *) 0 (* test112.lgf:7.16-test112.lgf:7.17 *)
then (* test112.lgf:7.18-test112.lgf:7.22 *)
(* STRING *) "0" (* test112.lgf:7.23-test112.lgf:7.26 *)
else (* test112.lgf:8.3-test112.lgf:8.7 *)
if (* test112.lgf:8.8-test112.lgf:8.10 *)
(* VAR_NAME *) i (* test112.lgf:8.11-test112.lgf:8.12 *)
== (* test112.lgf:8.13-test112.lgf:8.15 *)
(* INTEGER *) 1 (* test112.lgf:8.16-test112.lgf:8.17 *)
then (* test112.lgf:8.18-test112.lgf:8.22 *)
(* STRING *) "1" (* test112.lgf:8.23-test112.lgf:8.26 *)
else (* test112.lgf:9.3-test112.lgf:9.7 *)
if (* test112.lgf:9.8-test112.lgf:9.10 *)
(* VAR_NAME *) i (* test112.lgf:9.11-test112.lgf:9.12 *)
== (* test112.lgf:9.13-test112.lgf:9.15 *)
(* INTEGER *) 2 (* test112.lgf:9.16-test112.lgf:9.17 *)
then (* test112.lgf:9.18-test112.lgf:9.22 *)
(* STRING *) "2" (* test112.lgf:9.23-test112.lgf:9.26 *)
else (* test112.lgf:10.3-test112.lgf:10.7 *)
if (* test112.lgf:10.8-test112.lgf:10.10 *)
(* VAR_NAME *) i (* test112.lgf:10.11-test112.lgf:10.12 *)
== (* test112.lgf:10.13-test112.lgf:10.15 *)
(* INTEGER *) 3 (* test112.lgf:10.16-test112.lgf:10.17 *)
then (* test112.lgf:10.18-test112.lgf:10.22 *)
(* STRING *) "3" (* test112.lgf:10.23-test112.lgf:10.26 *)
else (* test112.lgf:11.3-test112.lgf:11.7 *)
if (* test112.lgf:11.8-test112.lgf:11.10 *)
(* VAR_NAME *) i (* test112.lgf:11.11-test112.lgf:11.12 *)
== (* test112.lgf:11.13-test112.lgf:11.15 *)
(* INTEGER *) 4 (* test112.lgf:11.16-test112.lgf:11.17 *)
then (* test112.lgf:11.18-test112.lgf:11.22 *)
(* STRING *) "4" (* test112.lgf:11.23-test112.lgf:11.26 *)
else (* test112.lgf:12.3-test112.lgf:12.7 *)
if (* test112.lgf:12.8-test112.lgf:12.10 *)
(* VAR_NAME *) i (* test112.lgf:12.11-test112.lgf:12.12 *)
== (* test112.lgf:12.13-test112.lgf:12.15 *)
(* INTEGER *) 5 (* test112.lgf:12.16-test112.lgf:12.17 *)
then (* test112.lgf:12.18-test112.lgf:12.22 *)
(* STRING *) "5" (* test112.lgf:12.23-test112.lgf:12.26 *)
else (* test112.lgf:13.3-test112.lgf:13.7 *)
if (* test112.lgf:13.8-test112.lgf:13.10 *)
(* VAR_NAME *) i (* test112.lgf:13.11-test112.lgf:13.12 *)
== (* test112.lgf:13.13-test112.lgf:13.15 *)
(* INTEGER *) 6 (* test112.lgf:13.16-test112.lgf:13.17 *)
then (* test112.lgf:13.18-test112.lgf:13.22 *)
(* STRING *) "6" (* test112.lgf:13.23-test112.lgf:13.26 *)
else (* test112.lgf:14.3-test112.lgf:14.7 *)
if (* test112.lgf:14.8-test112.lgf:14.10 *)
(* VAR_NAME *) i (* test112.lgf:14.11-test112.lgf:14.12 *)
== (* test112.lgf:14.13-test112.lgf:14.15 *)
(* INTEGER *) 7 (* test112.lgf:14.16-test112.lgf:14.17 *)
then (* test112.lgf:14.18-test112.lgf:14.22 *)
(* STRING *) "7" (* test112.lgf:14.23-test112.lgf:14.26 *)
else (* test112.lgf:15.3-test112.lgf:15.7 *)
if (* test112.lgf:15.8-test112.lgf:15.10 *)
(* VAR_NAME *) i (* test112.lgf:15.11-test112.lgf:15.12 *)
== (* test112.lgf:15.13-test112.lgf:15.15 *)
(* INTEGER *) 8 (* test112.lgf:15.16-test112.lgf:15.17 *)
then (* test112.lgf:15.18-test112.lgf:15.22 *)
(* STRING *) "8" (* test112.lgf:15.23-test112.lgf:15.26 *)
else (* test112.lgf:16.3-test112.lgf:16.7 *)
if (* test112.lgf:16.8-test112.lgf:16.10 *)
(* VAR_NAME *) i (* test112.lgf:16.11-test112.lgf:16.12 *)
== (* test112.lgf:16.13-test112.lgf:16.15 *)
(* INTEGER *) 9 (* test112.lgf:16.16-test112.lgf:16.17 *)
then (* test112.lgf:16.18-test112.lgf:16.22 *)
(* STRING *) "9" (* test112.lgf:16.23-test112.lgf:16.26 *)
else (* test112.lgf:17.3-test112.lgf:17.7 *)
( (* test112.lgf:17.8-test112.lgf:17.9 *)
(* VAR_NAME *) intToString (* test112.lgf:17.9-test112.lgf:17.20 *)
( (* test112.lgf:17.21-test112.lgf:17.22 *)
(* VAR_NAME *) i (* test112.lgf:17.22-test112.lgf:17.23 *)
/ (* test112.lgf:17.24-test112.lgf:17.25 *)
(* INTEGER *) 10 (* test112.lgf:17.26-test112.lgf:17.28 *)
) (* test112.lgf:17.28-test112.lgf:17.29 *)
) (* test112.lgf:17.29-test112.lgf:17.30 *)
^ (* test112.lgf:17.31-test112.lgf:17.32 *)
( (* test112.lgf:17.33-test112.lgf:17.34 *)
(* VAR_NAME *) intToString (* test112.lgf:17.34-test112.lgf:17.45 *)
( (* test112.lgf:17.46-test112.lgf:17.47 *)
(* VAR_NAME *) i (* test112.lgf:17.47-test112.lgf:17.48 *)
% (* test112.lgf:17.49-test112.lgf:17.50 *)
(* INTEGER *) 10 (* test112.lgf:17.51-test112.lgf:17.53 *)
) (* test112.lgf:17.53-test112.lgf:17.54 *)
) (* test112.lgf:17.54-test112.lgf:17.55 *)
val (* test112.lgf:19.0-test112.lgf:19.3 *)
(* VAR_NAME *) ord0 (* test112.lgf:19.4-test112.lgf:19.8 *)
= (* test112.lgf:19.9-test112.lgf:19.10 *)
(* VAR_NAME *) subscript (* test112.lgf:19.11-test112.lgf:19.20 *)
(* STRING *) "0" (* test112.lgf:19.21-test112.lgf:19.24 *)
(* INTEGER *) 0 (* test112.lgf:19.25-test112.lgf:19.26 *)
val (* test112.lgf:20.0-test112.lgf:20.3 *)
(* VAR_NAME *) ord9 (* test112.lgf:20.4-test112.lgf:20.8 *)
= (* test112.lgf:20.9-test112.lgf:20.10 *)
(* VAR_NAME *) subscript (* test112.lgf:20.11-test112.lgf:20.20 *)
(* STRING *) "9" (* test112.lgf:20.21-test112.lgf:20.24 *)
(* INTEGER *) 0 (* test112.lgf:20.25-test112.lgf:20.26 *)
fun (* test112.lgf:22.0-test112.lgf:22.3 *)
(* VAR_NAME *) charToDigit (* test112.lgf:22.4-test112.lgf:22.15 *)
( (* test112.lgf:22.16-test112.lgf:22.17 *)
(* VAR_NAME *) c (* test112.lgf:22.17-test112.lgf:22.18 *)
: (* test112.lgf:22.18-test112.lgf:22.19 *)
(* CON_NAME *) Integer (* test112.lgf:22.20-test112.lgf:22.27 *)
) (* test112.lgf:22.27-test112.lgf:22.28 *)
: (* test112.lgf:22.29-test112.lgf:22.30 *)
(* CON_NAME *) Option (* test112.lgf:22.31-test112.lgf:22.37 *)
[ (* test112.lgf:22.38-test112.lgf:22.39 *)
(* CON_NAME *) Integer (* test112.lgf:22.39-test112.lgf:22.46 *)
] (* test112.lgf:22.46-test112.lgf:22.47 *)
= (* test112.lgf:22.48-test112.lgf:22.49 *)
if (* test112.lgf:23.2-test112.lgf:23.4 *)
(* VAR_NAME *) ord0 (* test112.lgf:23.5-test112.lgf:23.9 *)
<= (* test112.lgf:23.10-test112.lgf:23.12 *)
(* VAR_NAME *) c (* test112.lgf:23.13-test112.lgf:23.14 *)
andalso (* test112.lgf:23.15-test112.lgf:23.22 *)
(* VAR_NAME *) c (* test112.lgf:23.23-test112.lgf:23.24 *)
<= (* test112.lgf:23.25-test112.lgf:23.27 *)
(* VAR_NAME *) ord9 (* test112.lgf:23.28-test112.lgf:23.32 *)
then (* test112.lgf:24.4-test112.lgf:24.8 *)
(* CON_NAME *) Some (* test112.lgf:24.9-test112.lgf:24.13 *)
[ (* test112.lgf:24.14-test112.lgf:24.15 *)
(* CON_NAME *) Integer (* test112.lgf:24.15-test112.lgf:24.22 *)
] (* test112.lgf:24.22-test112.lgf:24.23 *)
{ (* test112.lgf:24.24-test112.lgf:24.25 *)
(* VAR_NAME *) c (* test112.lgf:24.25-test112.lgf:24.26 *)
- (* test112.lgf:24.27-test112.lgf:24.28 *)
(* VAR_NAME *) ord0 (* test112.lgf:24.29-test112.lgf:24.33 *)
} (* test112.lgf:24.33-test112.lgf:24.34 *)
else (* test112.lgf:25.4-test112.lgf:25.8 *)
(* CON_NAME *) None (* test112.lgf:25.9-test112.lgf:25.13 *)
[ (* test112.lgf:25.14-test112.lgf:25.15 *)
(* CON_NAME *) Integer (* test112.lgf:25.15-test112.lgf:25.22 *)
] (* test112.lgf:25.22-test112.lgf:25.23 *)
fun (* test112.lgf:27.0-test112.lgf:27.3 *)
(* VAR_NAME *) stringToInt (* test112.lgf:27.4-test112.lgf:27.15 *)
( (* test112.lgf:27.16-test112.lgf:27.17 *)
(* VAR_NAME *) s (* test112.lgf:27.17-test112.lgf:27.18 *)
: (* test112.lgf:27.19-test112.lgf:27.20 *)
(* CON_NAME *) String (* test112.lgf:27.21-test112.lgf:27.27 *)
) (* test112.lgf:27.27-test112.lgf:27.28 *)
: (* test112.lgf:27.29-test112.lgf:27.30 *)
(* CON_NAME *) Option (* test112.lgf:27.31-test112.lgf:27.37 *)
[ (* test112.lgf:27.38-test112.lgf:27.39 *)
(* CON_NAME *) Integer (* test112.lgf:27.39-test112.lgf:27.46 *)
] (* test112.lgf:27.46-test112.lgf:27.47 *)
= (* test112.lgf:27.48-test112.lgf:27.49 *)
let (* test112.lgf:28.2-test112.lgf:28.5 *)
val (* test112.lgf:29.4-test112.lgf:29.7 *)
(* VAR_NAME *) sz (* test112.lgf:29.8-test112.lgf:29.10 *)
= (* test112.lgf:29.11-test112.lgf:29.12 *)
(* VAR_NAME *) size (* test112.lgf:29.13-test112.lgf:29.17 *)
(* VAR_NAME *) s (* test112.lgf:29.18-test112.lgf:29.19 *)
fun (* test112.lgf:30.4-test112.lgf:30.7 *)
(* VAR_NAME *) loop (* test112.lgf:30.8-test112.lgf:30.12 *)
( (* test112.lgf:30.13-test112.lgf:30.14 *)
(* VAR_NAME *) pos (* test112.lgf:30.14-test112.lgf:30.17 *)
: (* test112.lgf:30.17-test112.lgf:30.18 *)
(* CON_NAME *) Integer (* test112.lgf:30.19-test112.lgf:30.26 *)
) (* test112.lgf:30.26-test112.lgf:30.27 *)
( (* test112.lgf:30.28-test112.lgf:30.29 *)
(* VAR_NAME *) acc (* test112.lgf:30.29-test112.lgf:30.32 *)
: (* test112.lgf:30.32-test112.lgf:30.33 *)
(* CON_NAME *) Integer (* test112.lgf:30.34-test112.lgf:30.41 *)
) (* test112.lgf:30.41-test112.lgf:30.42 *)
: (* test112.lgf:30.43-test112.lgf:30.44 *)
(* CON_NAME *) Option (* test112.lgf:30.45-test112.lgf:30.51 *)
[ (* test112.lgf:30.52-test112.lgf:30.53 *)
(* CON_NAME *) Integer (* test112.lgf:30.53-test112.lgf:30.60 *)
] (* test112.lgf:30.60-test112.lgf:30.61 *)
= (* test112.lgf:30.62-test112.lgf:30.63 *)
if (* test112.lgf:31.6-test112.lgf:31.8 *)
(* VAR_NAME *) pos (* test112.lgf:31.9-test112.lgf:31.12 *)
< (* test112.lgf:31.13-test112.lgf:31.14 *)
(* VAR_NAME *) sz (* test112.lgf:31.15-test112.lgf:31.17 *)
then (* test112.lgf:32.8-test112.lgf:32.12 *)
case (* test112.lgf:32.13-test112.lgf:32.17 *)
(* VAR_NAME *) charToDigit (* test112.lgf:32.18-test112.lgf:32.29 *)
( (* test112.lgf:32.30-test112.lgf:32.31 *)
(* VAR_NAME *) subscript (* test112.lgf:32.31-test112.lgf:32.40 *)
(* VAR_NAME *) s (* test112.lgf:32.41-test112.lgf:32.42 *)
(* VAR_NAME *) pos (* test112.lgf:32.43-test112.lgf:32.46 *)
) (* test112.lgf:32.46-test112.lgf:32.47 *)
of (* test112.lgf:32.48-test112.lgf:32.50 *)
(* CON_NAME *) None (* test112.lgf:33.16-test112.lgf:33.20 *)
[ (* test112.lgf:33.21-test112.lgf:33.22 *)
(* CON_NAME *) Integer (* test112.lgf:33.22-test112.lgf:33.29 *)
] (* test112.lgf:33.29-test112.lgf:33.30 *)
=> (* test112.lgf:33.31-test112.lgf:33.33 *)
(* CON_NAME *) None (* test112.lgf:33.34-test112.lgf:33.38 *)
[ (* test112.lgf:33.39-test112.lgf:33.40 *)
(* CON_NAME *) Integer (* test112.lgf:33.40-test112.lgf:33.47 *)
] (* test112.lgf:33.47-test112.lgf:33.48 *)
| (* test112.lgf:34.14-test112.lgf:34.15 *)
(* CON_NAME *) Some (* test112.lgf:34.16-test112.lgf:34.20 *)
[ (* test112.lgf:34.21-test112.lgf:34.22 *)
(* CON_NAME *) Integer (* test112.lgf:34.22-test112.lgf:34.29 *)
] (* test112.lgf:34.29-test112.lgf:34.30 *)
{ (* test112.lgf:34.31-test112.lgf:34.32 *)
(* VAR_NAME *) i (* test112.lgf:34.32-test112.lgf:34.33 *)
} (* test112.lgf:34.33-test112.lgf:34.34 *)
=> (* test112.lgf:34.35-test112.lgf:34.37 *)
(* VAR_NAME *) loop (* test112.lgf:34.38-test112.lgf:34.42 *)
( (* test112.lgf:34.43-test112.lgf:34.44 *)
(* VAR_NAME *) pos (* test112.lgf:34.44-test112.lgf:34.47 *)
+ (* test112.lgf:34.48-test112.lgf:34.49 *)
(* INTEGER *) 1 (* test112.lgf:34.50-test112.lgf:34.51 *)
) (* test112.lgf:34.51-test112.lgf:34.52 *)
( (* test112.lgf:34.53-test112.lgf:34.54 *)
(* VAR_NAME *) acc (* test112.lgf:34.54-test112.lgf:34.57 *)
* (* test112.lgf:34.58-test112.lgf:34.59 *)
(* INTEGER *) 10 (* test112.lgf:34.60-test112.lgf:34.62 *)
+ (* test112.lgf:34.63-test112.lgf:34.64 *)
(* VAR_NAME *) i (* test112.lgf:34.65-test112.lgf:34.66 *)
) (* test112.lgf:34.66-test112.lgf:34.67 *)
end (* test112.lgf:35.13-test112.lgf:35.16 *)
else (* test112.lgf:36.6-test112.lgf:36.10 *)
(* CON_NAME *) Some (* test112.lgf:36.11-test112.lgf:36.15 *)
[ (* test112.lgf:36.16-test112.lgf:36.17 *)
(* CON_NAME *) Integer (* test112.lgf:36.17-test112.lgf:36.24 *)
] (* test112.lgf:36.24-test112.lgf:36.25 *)
{ (* test112.lgf:36.26-test112.lgf:36.27 *)
(* VAR_NAME *) acc (* test112.lgf:36.27-test112.lgf:36.30 *)
} (* test112.lgf:36.30-test112.lgf:36.31 *)
in (* test112.lgf:37.2-test112.lgf:37.4 *)
if (* test112.lgf:38.4-test112.lgf:38.6 *)
(* VAR_NAME *) sz (* test112.lgf:38.7-test112.lgf:38.9 *)
> (* test112.lgf:38.10-test112.lgf:38.11 *)
(* INTEGER *) 0 (* test112.lgf:38.12-test112.lgf:38.13 *)
then (* test112.lgf:39.6-test112.lgf:39.10 *)
(* VAR_NAME *) loop (* test112.lgf:39.11-test112.lgf:39.15 *)
(* INTEGER *) 0 (* test112.lgf:39.16-test112.lgf:39.17 *)
(* INTEGER *) 0 (* test112.lgf:39.18-test112.lgf:39.19 *)
else (* test112.lgf:40.4-test112.lgf:40.8 *)
(* CON_NAME *) None (* test112.lgf:40.9-test112.lgf:40.13 *)
[ (* test112.lgf:40.14-test112.lgf:40.15 *)
(* CON_NAME *) Integer (* test112.lgf:40.15-test112.lgf:40.22 *)
] (* test112.lgf:40.22-test112.lgf:40.23 *)
end (* test112.lgf:41.2-test112.lgf:41.5 *)
val (* test112.lgf:45.0-test112.lgf:45.3 *)
(* VAR_NAME *) fib (* test112.lgf:45.4-test112.lgf:45.7 *)
: (* test112.lgf:45.8-test112.lgf:45.9 *)
(* CON_NAME *) Integer (* test112.lgf:45.10-test112.lgf:45.17 *)
-> (* test112.lgf:45.18-test112.lgf:45.20 *)
(* CON_NAME *) Integer (* test112.lgf:45.21-test112.lgf:45.28 *)
= (* test112.lgf:45.29-test112.lgf:45.30 *)
let (* test112.lgf:46.2-test112.lgf:46.5 *)
val (* test112.lgf:47.4-test112.lgf:47.7 *)
(* VAR_NAME *) a (* test112.lgf:47.8-test112.lgf:47.9 *)
= (* test112.lgf:47.10-test112.lgf:47.11 *)
(* VAR_NAME *) array (* test112.lgf:47.12-test112.lgf:47.17 *)
[ (* test112.lgf:47.18-test112.lgf:47.19 *)
(* CON_NAME *) Array (* test112.lgf:47.19-test112.lgf:47.24 *)
[ (* test112.lgf:47.25-test112.lgf:47.26 *)
(* CON_NAME *) Option (* test112.lgf:47.26-test112.lgf:47.32 *)
[ (* test112.lgf:47.33-test112.lgf:47.34 *)
(* CON_NAME *) Integer (* test112.lgf:47.34-test112.lgf:47.41 *)
] (* test112.lgf:47.41-test112.lgf:47.42 *)
] (* test112.lgf:47.42-test112.lgf:47.43 *)
] (* test112.lgf:47.43-test112.lgf:47.44 *)
(* INTEGER *) 1 (* test112.lgf:47.45-test112.lgf:47.46 *)
( (* test112.lgf:47.47-test112.lgf:47.48 *)
(* VAR_NAME *) array (* test112.lgf:47.48-test112.lgf:47.53 *)
[ (* test112.lgf:47.54-test112.lgf:47.55 *)
(* CON_NAME *) Option (* test112.lgf:47.55-test112.lgf:47.61 *)
[ (* test112.lgf:47.62-test112.lgf:47.63 *)
(* CON_NAME *) Integer (* test112.lgf:47.63-test112.lgf:47.70 *)
] (* test112.lgf:47.70-test112.lgf:47.71 *)
] (* test112.lgf:47.71-test112.lgf:47.72 *)
(* INTEGER *) 2 (* test112.lgf:47.73-test112.lgf:47.74 *)
( (* test112.lgf:47.75-test112.lgf:47.76 *)
(* CON_NAME *) None (* test112.lgf:47.76-test112.lgf:47.80 *)
[ (* test112.lgf:47.81-test112.lgf:47.82 *)
(* CON_NAME *) Integer (* test112.lgf:47.82-test112.lgf:47.89 *)
] (* test112.lgf:47.89-test112.lgf:47.90 *)
) (* test112.lgf:47.90-test112.lgf:47.91 *)
) (* test112.lgf:47.91-test112.lgf:47.92 *)
fun (* test112.lgf:48.4-test112.lgf:48.7 *)
(* VAR_NAME *) expandArray (* test112.lgf:48.8-test112.lgf:48.19 *)
( (* test112.lgf:48.20-test112.lgf:48.21 *)
(* VAR_NAME *) u (* test112.lgf:48.21-test112.lgf:48.22 *)
: (* test112.lgf:48.23-test112.lgf:48.24 *)
(* CON_NAME *) Unit (* test112.lgf:48.25-test112.lgf:48.29 *)
) (* test112.lgf:48.29-test112.lgf:48.30 *)
: (* test112.lgf:48.31-test112.lgf:48.32 *)
(* CON_NAME *) Unit (* test112.lgf:48.33-test112.lgf:48.37 *)
= (* test112.lgf:48.38-test112.lgf:48.39 *)
let (* test112.lgf:49.6-test112.lgf:49.9 *)
val (* test112.lgf:50.8-test112.lgf:50.11 *)
(* VAR_NAME *) old (* test112.lgf:50.12-test112.lgf:50.15 *)
= (* test112.lgf:50.16-test112.lgf:50.17 *)
(* VAR_NAME *) a (* test112.lgf:50.18-test112.lgf:50.19 *)
! (* test112.lgf:50.20-test112.lgf:50.21 *)
(* INTEGER *) 0 (* test112.lgf:50.22-test112.lgf:50.23 *)
val (* test112.lgf:51.8-test112.lgf:51.11 *)
(* VAR_NAME *) new (* test112.lgf:51.12-test112.lgf:51.15 *)
= (* test112.lgf:51.16-test112.lgf:51.17 *)
(* VAR_NAME *) array (* test112.lgf:51.18-test112.lgf:51.23 *)
[ (* test112.lgf:51.24-test112.lgf:51.25 *)
(* CON_NAME *) Option (* test112.lgf:51.25-test112.lgf:51.31 *)
[ (* test112.lgf:51.32-test112.lgf:51.33 *)
(* CON_NAME *) Integer (* test112.lgf:51.33-test112.lgf:51.40 *)
] (* test112.lgf:51.40-test112.lgf:51.41 *)
] (* test112.lgf:51.41-test112.lgf:51.42 *)
( (* test112.lgf:51.43-test112.lgf:51.44 *)
(* INTEGER *) 2 (* test112.lgf:51.44-test112.lgf:51.45 *)
* (* test112.lgf:51.46-test112.lgf:51.47 *)
# (* test112.lgf:51.48-test112.lgf:51.49 *)
(* VAR_NAME *) old (* test112.lgf:51.50-test112.lgf:51.53 *)
) (* test112.lgf:51.53-test112.lgf:51.54 *)
( (* test112.lgf:51.55-test112.lgf:51.56 *)
(* CON_NAME *) None (* test112.lgf:51.56-test112.lgf:51.60 *)
[ (* test112.lgf:51.61-test112.lgf:51.62 *)
(* CON_NAME *) Integer (* test112.lgf:51.62-test112.lgf:51.69 *)
] (* test112.lgf:51.69-test112.lgf:51.70 *)
) (* test112.lgf:51.70-test112.lgf:51.71 *)
fun (* test112.lgf:52.8-test112.lgf:52.11 *)
(* VAR_NAME *) loop (* test112.lgf:52.12-test112.lgf:52.16 *)
( (* test112.lgf:52.17-test112.lgf:52.18 *)
(* VAR_NAME *) i (* test112.lgf:52.18-test112.lgf:52.19 *)
: (* test112.lgf:52.19-test112.lgf:52.20 *)
(* CON_NAME *) Integer (* test112.lgf:52.20-test112.lgf:52.27 *)
) (* test112.lgf:52.27-test112.lgf:52.28 *)
: (* test112.lgf:52.29-test112.lgf:52.30 *)
(* CON_NAME *) Unit (* test112.lgf:52.31-test112.lgf:52.35 *)
= (* test112.lgf:52.36-test112.lgf:52.37 *)
if (* test112.lgf:53.10-test112.lgf:53.12 *)
(* VAR_NAME *) i (* test112.lgf:53.13-test112.lgf:53.14 *)
< (* test112.lgf:53.15-test112.lgf:53.16 *)
# (* test112.lgf:53.17-test112.lgf:53.18 *)
(* VAR_NAME *) old (* test112.lgf:53.19-test112.lgf:53.22 *)
then (* test112.lgf:54.12-test112.lgf:54.16 *)
( (* test112.lgf:54.17-test112.lgf:54.18 *)
(* VAR_NAME *) new (* test112.lgf:54.18-test112.lgf:54.21 *)
! (* test112.lgf:54.22-test112.lgf:54.23 *)
(* VAR_NAME *) i (* test112.lgf:54.24-test112.lgf:54.25 *)
:= (* test112.lgf:54.26-test112.lgf:54.28 *)
(* VAR_NAME *) old (* test112.lgf:54.29-test112.lgf:54.32 *)
! (* test112.lgf:54.33-test112.lgf:54.34 *)
(* VAR_NAME *) i (* test112.lgf:54.35-test112.lgf:54.36 *)
; (* test112.lgf:54.37-test112.lgf:54.38 *)
(* VAR_NAME *) loop (* test112.lgf:54.39-test112.lgf:54.43 *)
( (* test112.lgf:54.44-test112.lgf:54.45 *)
(* VAR_NAME *) i (* test112.lgf:54.45-test112.lgf:54.46 *)
+ (* test112.lgf:54.47-test112.lgf:54.48 *)
(* INTEGER *) 1 (* test112.lgf:54.49-test112.lgf:54.50 *)
) (* test112.lgf:54.50-test112.lgf:54.51 *)
) (* test112.lgf:54.51-test112.lgf:54.52 *)
else (* test112.lgf:55.10-test112.lgf:55.14 *)
(* CON_NAME *) Unit (* test112.lgf:55.15-test112.lgf:55.19 *)
val (* test112.lgf:56.8-test112.lgf:56.11 *)
_ (* test112.lgf:56.12-test112.lgf:56.13 *)
= (* test112.lgf:56.14-test112.lgf:56.15 *)
(* VAR_NAME *) loop (* test112.lgf:56.16-test112.lgf:56.20 *)
(* INTEGER *) 0 (* test112.lgf:56.21-test112.lgf:56.22 *)
val (* test112.lgf:57.8-test112.lgf:57.11 *)
_ (* test112.lgf:57.12-test112.lgf:57.13 *)
= (* test112.lgf:57.14-test112.lgf:57.15 *)
(* VAR_NAME *) a (* test112.lgf:57.16-test112.lgf:57.17 *)
! (* test112.lgf:57.18-test112.lgf:57.19 *)
(* INTEGER *) 0 (* test112.lgf:57.20-test112.lgf:57.21 *)
:= (* test112.lgf:57.22-test112.lgf:57.24 *)
(* VAR_NAME *) new (* test112.lgf:57.25-test112.lgf:57.28 *)
in (* test112.lgf:58.6-test112.lgf:58.8 *)
(* CON_NAME *) Unit (* test112.lgf:59.8-test112.lgf:59.12 *)
end (* test112.lgf:60.6-test112.lgf:60.9 *)
val (* test112.lgf:61.4-test112.lgf:61.7 *)
_ (* test112.lgf:61.8-test112.lgf:61.9 *)
= (* test112.lgf:61.10-test112.lgf:61.11 *)
(* VAR_NAME *) a (* test112.lgf:61.12-test112.lgf:61.13 *)
! (* test112.lgf:61.14-test112.lgf:61.15 *)
(* INTEGER *) 0 (* test112.lgf:61.16-test112.lgf:61.17 *)
! (* test112.lgf:61.18-test112.lgf:61.19 *)
(* INTEGER *) 0 (* test112.lgf:61.20-test112.lgf:61.21 *)
:= (* test112.lgf:61.22-test112.lgf:61.24 *)
(* CON_NAME *) Some (* test112.lgf:61.25-test112.lgf:61.29 *)
[ (* test112.lgf:61.30-test112.lgf:61.31 *)
(* CON_NAME *) Integer (* test112.lgf:61.31-test112.lgf:61.38 *)
] (* test112.lgf:61.38-test112.lgf:61.39 *)
{ (* test112.lgf:61.40-test112.lgf:61.41 *)
(* INTEGER *) 1 (* test112.lgf:61.41-test112.lgf:61.42 *)
} (* test112.lgf:61.42-test112.lgf:61.43 *)
val (* test112.lgf:62.4-test112.lgf:62.7 *)
_ (* test112.lgf:62.8-test112.lgf:62.9 *)
= (* test112.lgf:62.10-test112.lgf:62.11 *)
(* VAR_NAME *) a (* test112.lgf:62.12-test112.lgf:62.13 *)
! (* test112.lgf:62.14-test112.lgf:62.15 *)
(* INTEGER *) 0 (* test112.lgf:62.16-test112.lgf:62.17 *)
! (* test112.lgf:62.18-test112.lgf:62.19 *)
(* INTEGER *) 1 (* test112.lgf:62.20-test112.lgf:62.21 *)
:= (* test112.lgf:62.22-test112.lgf:62.24 *)
(* CON_NAME *) Some (* test112.lgf:62.25-test112.lgf:62.29 *)
[ (* test112.lgf:62.30-test112.lgf:62.31 *)
(* CON_NAME *) Integer (* test112.lgf:62.31-test112.lgf:62.38 *)
] (* test112.lgf:62.38-test112.lgf:62.39 *)
{ (* test112.lgf:62.40-test112.lgf:62.41 *)
(* INTEGER *) 1 (* test112.lgf:62.41-test112.lgf:62.42 *)
} (* test112.lgf:62.42-test112.lgf:62.43 *)
fun (* test112.lgf:63.4-test112.lgf:63.7 *)
(* VAR_NAME *) fib (* test112.lgf:63.8-test112.lgf:63.11 *)
( (* test112.lgf:63.12-test112.lgf:63.13 *)
(* VAR_NAME *) i (* test112.lgf:63.13-test112.lgf:63.14 *)
: (* test112.lgf:63.14-test112.lgf:63.15 *)
(* CON_NAME *) Integer (* test112.lgf:63.15-test112.lgf:63.22 *)
) (* test112.lgf:63.22-test112.lgf:63.23 *)
: (* test112.lgf:63.24-test112.lgf:63.25 *)
(* CON_NAME *) Integer (* test112.lgf:63.26-test112.lgf:63.33 *)
= (* test112.lgf:63.34-test112.lgf:63.35 *)
if (* test112.lgf:64.6-test112.lgf:64.8 *)
(* VAR_NAME *) i (* test112.lgf:64.9-test112.lgf:64.10 *)
< (* test112.lgf:64.11-test112.lgf:64.12 *)
(* INTEGER *) 0 (* test112.lgf:64.13-test112.lgf:64.14 *)
then (* test112.lgf:65.8-test112.lgf:65.12 *)
(* INTEGER *) ~1 (* test112.lgf:65.13-test112.lgf:65.15 *)
else (* test112.lgf:66.6-test112.lgf:66.10 *)
if (* test112.lgf:66.11-test112.lgf:66.13 *)
(* VAR_NAME *) i (* test112.lgf:66.14-test112.lgf:66.15 *)
< (* test112.lgf:66.16-test112.lgf:66.17 *)
# (* test112.lgf:66.18-test112.lgf:66.19 *)
( (* test112.lgf:66.20-test112.lgf:66.21 *)
(* VAR_NAME *) a (* test112.lgf:66.21-test112.lgf:66.22 *)
! (* test112.lgf:66.23-test112.lgf:66.24 *)
(* INTEGER *) 0 (* test112.lgf:66.25-test112.lgf:66.26 *)
) (* test112.lgf:66.26-test112.lgf:66.27 *)
then (* test112.lgf:67.8-test112.lgf:67.12 *)
case (* test112.lgf:67.13-test112.lgf:67.17 *)
(* VAR_NAME *) a (* test112.lgf:67.18-test112.lgf:67.19 *)
! (* test112.lgf:67.20-test112.lgf:67.21 *)
(* INTEGER *) 0 (* test112.lgf:67.22-test112.lgf:67.23 *)
! (* test112.lgf:67.24-test112.lgf:67.25 *)
(* VAR_NAME *) i (* test112.lgf:67.26-test112.lgf:67.27 *)
of (* test112.lgf:67.28-test112.lgf:67.30 *)
(* CON_NAME *) Some (* test112.lgf:68.16-test112.lgf:68.20 *)
[ (* test112.lgf:68.21-test112.lgf:68.22 *)
(* CON_NAME *) Integer (* test112.lgf:68.22-test112.lgf:68.29 *)
] (* test112.lgf:68.29-test112.lgf:68.30 *)
{ (* test112.lgf:68.31-test112.lgf:68.32 *)
(* VAR_NAME *) r (* test112.lgf:68.32-test112.lgf:68.33 *)
} (* test112.lgf:68.33-test112.lgf:68.34 *)
=> (* test112.lgf:68.35-test112.lgf:68.37 *)
(* VAR_NAME *) r (* test112.lgf:68.38-test112.lgf:68.39 *)
| (* test112.lgf:69.14-test112.lgf:69.15 *)
(* CON_NAME *) None (* test112.lgf:69.16-test112.lgf:69.20 *)
[ (* test112.lgf:69.21-test112.lgf:69.22 *)
(* CON_NAME *) Integer (* test112.lgf:69.22-test112.lgf:69.29 *)
] (* test112.lgf:69.29-test112.lgf:69.30 *)
=> (* test112.lgf:69.31-test112.lgf:69.33 *)
let (* test112.lgf:70.18-test112.lgf:70.21 *)
val (* test112.lgf:71.20-test112.lgf:71.23 *)
(* VAR_NAME *) x (* test112.lgf:71.24-test112.lgf:71.25 *)
= (* test112.lgf:71.26-test112.lgf:71.27 *)
(* VAR_NAME *) fib (* test112.lgf:71.28-test112.lgf:71.31 *)
( (* test112.lgf:71.32-test112.lgf:71.33 *)
(* VAR_NAME *) i (* test112.lgf:71.33-test112.lgf:71.34 *)
- (* test112.lgf:71.35-test112.lgf:71.36 *)
(* INTEGER *) 1 (* test112.lgf:71.37-test112.lgf:71.38 *)
) (* test112.lgf:71.38-test112.lgf:71.39 *)
val (* test112.lgf:72.20-test112.lgf:72.23 *)
(* VAR_NAME *) y (* test112.lgf:72.24-test112.lgf:72.25 *)
= (* test112.lgf:72.26-test112.lgf:72.27 *)
(* VAR_NAME *) fib (* test112.lgf:72.28-test112.lgf:72.31 *)
( (* test112.lgf:72.32-test112.lgf:72.33 *)
(* VAR_NAME *) i (* test112.lgf:72.33-test112.lgf:72.34 *)
- (* test112.lgf:72.35-test112.lgf:72.36 *)
(* INTEGER *) 2 (* test112.lgf:72.37-test112.lgf:72.38 *)
) (* test112.lgf:72.38-test112.lgf:72.39 *)
val (* test112.lgf:73.20-test112.lgf:73.23 *)
(* VAR_NAME *) r (* test112.lgf:73.24-test112.lgf:73.25 *)
= (* test112.lgf:73.26-test112.lgf:73.27 *)
(* VAR_NAME *) x (* test112.lgf:73.28-test112.lgf:73.29 *)
+ (* test112.lgf:73.30-test112.lgf:73.31 *)
(* VAR_NAME *) y (* test112.lgf:73.32-test112.lgf:73.33 *)
val (* test112.lgf:74.20-test112.lgf:74.23 *)
_ (* test112.lgf:74.24-test112.lgf:74.25 *)
= (* test112.lgf:74.26-test112.lgf:74.27 *)
(* VAR_NAME *) a (* test112.lgf:74.28-test112.lgf:74.29 *)
! (* test112.lgf:74.30-test112.lgf:74.31 *)
(* INTEGER *) 0 (* test112.lgf:74.32-test112.lgf:74.33 *)
! (* test112.lgf:74.34-test112.lgf:74.35 *)
(* VAR_NAME *) i (* test112.lgf:74.36-test112.lgf:74.37 *)
:= (* test112.lgf:74.38-test112.lgf:74.40 *)
(* CON_NAME *) Some (* test112.lgf:74.41-test112.lgf:74.45 *)
[ (* test112.lgf:74.46-test112.lgf:74.47 *)
(* CON_NAME *) Integer (* test112.lgf:74.47-test112.lgf:74.54 *)
] (* test112.lgf:74.54-test112.lgf:74.55 *)
{ (* test112.lgf:74.56-test112.lgf:74.57 *)
(* VAR_NAME *) r (* test112.lgf:74.57-test112.lgf:74.58 *)
} (* test112.lgf:74.58-test112.lgf:74.59 *)
in (* test112.lgf:78.18-test112.lgf:78.20 *)
(* VAR_NAME *) r (* test112.lgf:79.20-test112.lgf:79.21 *)
end (* test112.lgf:80.18-test112.lgf:80.21 *)
end (* test112.lgf:81.13-test112.lgf:81.16 *)
else (* test112.lgf:82.6-test112.lgf:82.10 *)
( (* test112.lgf:82.11-test112.lgf:82.12 *)
(* VAR_NAME *) expandArray (* test112.lgf:82.12-test112.lgf:82.23 *)
(* CON_NAME *) Unit (* test112.lgf:82.24-test112.lgf:82.28 *)
; (* test112.lgf:82.28-test112.lgf:82.29 *)
(* VAR_NAME *) fib (* test112.lgf:82.30-test112.lgf:82.33 *)
(* VAR_NAME *) i (* test112.lgf:82.34-test112.lgf:82.35 *)
) (* test112.lgf:82.35-test112.lgf:82.36 *)
in (* test112.lgf:83.2-test112.lgf:83.4 *)
(* VAR_NAME *) fib (* test112.lgf:84.4-test112.lgf:84.7 *)
end (* test112.lgf:85.2-test112.lgf:85.5 *)
val (* test112.lgf:87.0-test112.lgf:87.3 *)
(* VAR_NAME *) s (* test112.lgf:87.4-test112.lgf:87.5 *)
= (* test112.lgf:87.6-test112.lgf:87.7 *)
if (* test112.lgf:88.2-test112.lgf:88.4 *)
(* VAR_NAME *) argc (* test112.lgf:88.5-test112.lgf:88.9 *)
(* CON_NAME *) Unit (* test112.lgf:88.10-test112.lgf:88.14 *)
> (* test112.lgf:88.15-test112.lgf:88.16 *)
(* INTEGER *) 1 (* test112.lgf:88.17-test112.lgf:88.18 *)
then (* test112.lgf:89.5-test112.lgf:89.9 *)
(* VAR_NAME *) arg (* test112.lgf:89.10-test112.lgf:89.13 *)
(* INTEGER *) 1 (* test112.lgf:89.14-test112.lgf:89.15 *)
else (* test112.lgf:90.2-test112.lgf:90.6 *)
(* STRING *) "42" (* test112.lgf:90.7-test112.lgf:90.11 *)
; (* test112.lgf:92.0-test112.lgf:92.1 *)
case (* test112.lgf:94.0-test112.lgf:94.4 *)
(* VAR_NAME *) stringToInt (* test112.lgf:94.5-test112.lgf:94.16 *)
(* VAR_NAME *) s (* test112.lgf:94.17-test112.lgf:94.18 *)
of (* test112.lgf:94.19-test112.lgf:94.21 *)
(* CON_NAME *) None (* test112.lgf:95.3-test112.lgf:95.7 *)
[ (* test112.lgf:95.8-test112.lgf:95.9 *)
(* CON_NAME *) Integer (* test112.lgf:95.9-test112.lgf:95.16 *)
] (* test112.lgf:95.16-test112.lgf:95.17 *)
=> (* test112.lgf:95.18-test112.lgf:95.20 *)
(* CON_NAME *) Unit (* test112.lgf:95.21-test112.lgf:95.25 *)
| (* test112.lgf:96.1-test112.lgf:96.2 *)
(* CON_NAME *) Some (* test112.lgf:96.3-test112.lgf:96.7 *)
[ (* test112.lgf:96.8-test112.lgf:96.9 *)
(* CON_NAME *) Integer (* test112.lgf:96.9-test112.lgf:96.16 *)
] (* test112.lgf:96.16-test112.lgf:96.17 *)
{ (* test112.lgf:96.18-test112.lgf:96.19 *)
(* VAR_NAME *) i (* test112.lgf:96.19-test112.lgf:96.20 *)
} (* test112.lgf:96.20-test112.lgf:96.21 *)
=> (* test112.lgf:96.22-test112.lgf:96.24 *)
( (* test112.lgf:96.25-test112.lgf:96.26 *)
(* VAR_NAME *) print (* test112.lgf:96.26-test112.lgf:96.31 *)
( (* test112.lgf:96.32-test112.lgf:96.33 *)
(* STRING *) "fib(" (* test112.lgf:96.33-test112.lgf:96.39 *)
^ (* test112.lgf:96.40-test112.lgf:96.41 *)
( (* test112.lgf:96.42-test112.lgf:96.43 *)
(* VAR_NAME *) intToString (* test112.lgf:96.43-test112.lgf:96.54 *)
(* VAR_NAME *) i (* test112.lgf:96.55-test112.lgf:96.56 *)
) (* test112.lgf:96.56-test112.lgf:96.57 *)
^ (* test112.lgf:96.58-test112.lgf:96.59 *)
(* STRING *) ") = " (* test112.lgf:96.60-test112.lgf:96.66 *)
^ (* test112.lgf:96.67-test112.lgf:96.68 *)
( (* test112.lgf:96.69-test112.lgf:96.70 *)
(* VAR_NAME *) intToString (* test112.lgf:96.70-test112.lgf:96.81 *)
( (* test112.lgf:96.82-test112.lgf:96.83 *)
(* VAR_NAME *) fib (* test112.lgf:96.83-test112.lgf:96.86 *)
(* VAR_NAME *) i (* test112.lgf:96.87-test112.lgf:96.88 *)
) (* test112.lgf:96.88-test112.lgf:96.89 *)
) (* test112.lgf:96.89-test112.lgf:96.90 *)
^ (* test112.lgf:96.91-test112.lgf:96.92 *)
(* STRING *) "\n" (* test112.lgf:96.93-test112.lgf:96.97 *)
) (* test112.lgf:96.97-test112.lgf:96.98 *)
) (* test112.lgf:96.98-test112.lgf:96.99 *)
end (* test112.lgf:97.0-test112.lgf:97.3 *)
