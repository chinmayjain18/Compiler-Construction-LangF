fun (* test109.lgf:3.0-test109.lgf:3.3 *)
(* VAR_NAME *) intToString (* test109.lgf:3.4-test109.lgf:3.15 *)
( (* test109.lgf:3.16-test109.lgf:3.17 *)
(* VAR_NAME *) i (* test109.lgf:3.17-test109.lgf:3.18 *)
: (* test109.lgf:3.18-test109.lgf:3.19 *)
(* CON_NAME *) Integer (* test109.lgf:3.19-test109.lgf:3.26 *)
) (* test109.lgf:3.26-test109.lgf:3.27 *)
: (* test109.lgf:3.28-test109.lgf:3.29 *)
(* CON_NAME *) String (* test109.lgf:3.30-test109.lgf:3.36 *)
= (* test109.lgf:3.37-test109.lgf:3.38 *)
if (* test109.lgf:4.3-test109.lgf:4.5 *)
(* VAR_NAME *) i (* test109.lgf:4.6-test109.lgf:4.7 *)
< (* test109.lgf:4.8-test109.lgf:4.9 *)
(* INTEGER *) 0 (* test109.lgf:4.10-test109.lgf:4.11 *)
then (* test109.lgf:4.12-test109.lgf:4.16 *)
(* STRING *) "~" (* test109.lgf:4.17-test109.lgf:4.20 *)
^ (* test109.lgf:4.21-test109.lgf:4.22 *)
( (* test109.lgf:4.23-test109.lgf:4.24 *)
(* VAR_NAME *) intToString (* test109.lgf:4.24-test109.lgf:4.35 *)
( (* test109.lgf:4.36-test109.lgf:4.37 *)
~ (* test109.lgf:4.37-test109.lgf:4.38 *)
(* VAR_NAME *) i (* test109.lgf:4.38-test109.lgf:4.39 *)
) (* test109.lgf:4.39-test109.lgf:4.40 *)
) (* test109.lgf:4.40-test109.lgf:4.41 *)
else (* test109.lgf:5.3-test109.lgf:5.7 *)
if (* test109.lgf:5.8-test109.lgf:5.10 *)
(* VAR_NAME *) i (* test109.lgf:5.11-test109.lgf:5.12 *)
== (* test109.lgf:5.13-test109.lgf:5.15 *)
(* INTEGER *) 0 (* test109.lgf:5.16-test109.lgf:5.17 *)
then (* test109.lgf:5.18-test109.lgf:5.22 *)
(* STRING *) "0" (* test109.lgf:5.23-test109.lgf:5.26 *)
else (* test109.lgf:6.3-test109.lgf:6.7 *)
if (* test109.lgf:6.8-test109.lgf:6.10 *)
(* VAR_NAME *) i (* test109.lgf:6.11-test109.lgf:6.12 *)
== (* test109.lgf:6.13-test109.lgf:6.15 *)
(* INTEGER *) 1 (* test109.lgf:6.16-test109.lgf:6.17 *)
then (* test109.lgf:6.18-test109.lgf:6.22 *)
(* STRING *) "1" (* test109.lgf:6.23-test109.lgf:6.26 *)
else (* test109.lgf:7.3-test109.lgf:7.7 *)
if (* test109.lgf:7.8-test109.lgf:7.10 *)
(* VAR_NAME *) i (* test109.lgf:7.11-test109.lgf:7.12 *)
== (* test109.lgf:7.13-test109.lgf:7.15 *)
(* INTEGER *) 2 (* test109.lgf:7.16-test109.lgf:7.17 *)
then (* test109.lgf:7.18-test109.lgf:7.22 *)
(* STRING *) "2" (* test109.lgf:7.23-test109.lgf:7.26 *)
else (* test109.lgf:8.3-test109.lgf:8.7 *)
if (* test109.lgf:8.8-test109.lgf:8.10 *)
(* VAR_NAME *) i (* test109.lgf:8.11-test109.lgf:8.12 *)
== (* test109.lgf:8.13-test109.lgf:8.15 *)
(* INTEGER *) 3 (* test109.lgf:8.16-test109.lgf:8.17 *)
then (* test109.lgf:8.18-test109.lgf:8.22 *)
(* STRING *) "3" (* test109.lgf:8.23-test109.lgf:8.26 *)
else (* test109.lgf:9.3-test109.lgf:9.7 *)
if (* test109.lgf:9.8-test109.lgf:9.10 *)
(* VAR_NAME *) i (* test109.lgf:9.11-test109.lgf:9.12 *)
== (* test109.lgf:9.13-test109.lgf:9.15 *)
(* INTEGER *) 4 (* test109.lgf:9.16-test109.lgf:9.17 *)
then (* test109.lgf:9.18-test109.lgf:9.22 *)
(* STRING *) "4" (* test109.lgf:9.23-test109.lgf:9.26 *)
else (* test109.lgf:10.3-test109.lgf:10.7 *)
if (* test109.lgf:10.8-test109.lgf:10.10 *)
(* VAR_NAME *) i (* test109.lgf:10.11-test109.lgf:10.12 *)
== (* test109.lgf:10.13-test109.lgf:10.15 *)
(* INTEGER *) 5 (* test109.lgf:10.16-test109.lgf:10.17 *)
then (* test109.lgf:10.18-test109.lgf:10.22 *)
(* STRING *) "5" (* test109.lgf:10.23-test109.lgf:10.26 *)
else (* test109.lgf:11.3-test109.lgf:11.7 *)
if (* test109.lgf:11.8-test109.lgf:11.10 *)
(* VAR_NAME *) i (* test109.lgf:11.11-test109.lgf:11.12 *)
== (* test109.lgf:11.13-test109.lgf:11.15 *)
(* INTEGER *) 6 (* test109.lgf:11.16-test109.lgf:11.17 *)
then (* test109.lgf:11.18-test109.lgf:11.22 *)
(* STRING *) "6" (* test109.lgf:11.23-test109.lgf:11.26 *)
else (* test109.lgf:12.3-test109.lgf:12.7 *)
if (* test109.lgf:12.8-test109.lgf:12.10 *)
(* VAR_NAME *) i (* test109.lgf:12.11-test109.lgf:12.12 *)
== (* test109.lgf:12.13-test109.lgf:12.15 *)
(* INTEGER *) 7 (* test109.lgf:12.16-test109.lgf:12.17 *)
then (* test109.lgf:12.18-test109.lgf:12.22 *)
(* STRING *) "7" (* test109.lgf:12.23-test109.lgf:12.26 *)
else (* test109.lgf:13.3-test109.lgf:13.7 *)
if (* test109.lgf:13.8-test109.lgf:13.10 *)
(* VAR_NAME *) i (* test109.lgf:13.11-test109.lgf:13.12 *)
== (* test109.lgf:13.13-test109.lgf:13.15 *)
(* INTEGER *) 8 (* test109.lgf:13.16-test109.lgf:13.17 *)
then (* test109.lgf:13.18-test109.lgf:13.22 *)
(* STRING *) "8" (* test109.lgf:13.23-test109.lgf:13.26 *)
else (* test109.lgf:14.3-test109.lgf:14.7 *)
if (* test109.lgf:14.8-test109.lgf:14.10 *)
(* VAR_NAME *) i (* test109.lgf:14.11-test109.lgf:14.12 *)
== (* test109.lgf:14.13-test109.lgf:14.15 *)
(* INTEGER *) 9 (* test109.lgf:14.16-test109.lgf:14.17 *)
then (* test109.lgf:14.18-test109.lgf:14.22 *)
(* STRING *) "9" (* test109.lgf:14.23-test109.lgf:14.26 *)
else (* test109.lgf:15.3-test109.lgf:15.7 *)
( (* test109.lgf:15.8-test109.lgf:15.9 *)
(* VAR_NAME *) intToString (* test109.lgf:15.9-test109.lgf:15.20 *)
( (* test109.lgf:15.21-test109.lgf:15.22 *)
(* VAR_NAME *) i (* test109.lgf:15.22-test109.lgf:15.23 *)
/ (* test109.lgf:15.24-test109.lgf:15.25 *)
(* INTEGER *) 10 (* test109.lgf:15.26-test109.lgf:15.28 *)
) (* test109.lgf:15.28-test109.lgf:15.29 *)
) (* test109.lgf:15.29-test109.lgf:15.30 *)
^ (* test109.lgf:15.31-test109.lgf:15.32 *)
( (* test109.lgf:15.33-test109.lgf:15.34 *)
(* VAR_NAME *) intToString (* test109.lgf:15.34-test109.lgf:15.45 *)
( (* test109.lgf:15.46-test109.lgf:15.47 *)
(* VAR_NAME *) i (* test109.lgf:15.47-test109.lgf:15.48 *)
% (* test109.lgf:15.49-test109.lgf:15.50 *)
(* INTEGER *) 10 (* test109.lgf:15.51-test109.lgf:15.53 *)
) (* test109.lgf:15.53-test109.lgf:15.54 *)
) (* test109.lgf:15.54-test109.lgf:15.55 *)
datatype (* test109.lgf:18.0-test109.lgf:18.8 *)
(* CON_NAME *) List (* test109.lgf:18.9-test109.lgf:18.13 *)
[ (* test109.lgf:18.14-test109.lgf:18.15 *)
(* TYVAR_NAME *) 'a (* test109.lgf:18.15-test109.lgf:18.17 *)
] (* test109.lgf:18.17-test109.lgf:18.18 *)
= (* test109.lgf:18.19-test109.lgf:18.20 *)
(* CON_NAME *) Nil (* test109.lgf:18.21-test109.lgf:18.24 *)
| (* test109.lgf:18.25-test109.lgf:18.26 *)
(* CON_NAME *) Cons (* test109.lgf:18.27-test109.lgf:18.31 *)
{ (* test109.lgf:18.32-test109.lgf:18.33 *)
(* TYVAR_NAME *) 'a (* test109.lgf:18.33-test109.lgf:18.35 *)
, (* test109.lgf:18.35-test109.lgf:18.36 *)
(* CON_NAME *) List (* test109.lgf:18.37-test109.lgf:18.41 *)
[ (* test109.lgf:18.42-test109.lgf:18.43 *)
(* TYVAR_NAME *) 'a (* test109.lgf:18.43-test109.lgf:18.45 *)
] (* test109.lgf:18.45-test109.lgf:18.46 *)
} (* test109.lgf:18.46-test109.lgf:18.47 *)
fun (* test109.lgf:20.0-test109.lgf:20.3 *)
(* VAR_NAME *) foldl (* test109.lgf:20.4-test109.lgf:20.9 *)
[ (* test109.lgf:20.10-test109.lgf:20.11 *)
(* TYVAR_NAME *) 'a (* test109.lgf:20.11-test109.lgf:20.13 *)
] (* test109.lgf:20.13-test109.lgf:20.14 *)
[ (* test109.lgf:20.15-test109.lgf:20.16 *)
(* TYVAR_NAME *) 'b (* test109.lgf:20.16-test109.lgf:20.18 *)
] (* test109.lgf:20.18-test109.lgf:20.19 *)
( (* test109.lgf:20.20-test109.lgf:20.21 *)
(* VAR_NAME *) f (* test109.lgf:20.21-test109.lgf:20.22 *)
: (* test109.lgf:20.22-test109.lgf:20.23 *)
(* TYVAR_NAME *) 'a (* test109.lgf:20.24-test109.lgf:20.26 *)
-> (* test109.lgf:20.27-test109.lgf:20.29 *)
(* TYVAR_NAME *) 'b (* test109.lgf:20.30-test109.lgf:20.32 *)
-> (* test109.lgf:20.33-test109.lgf:20.35 *)
(* TYVAR_NAME *) 'b (* test109.lgf:20.36-test109.lgf:20.38 *)
) (* test109.lgf:20.38-test109.lgf:20.39 *)
( (* test109.lgf:20.40-test109.lgf:20.41 *)
(* VAR_NAME *) b (* test109.lgf:20.41-test109.lgf:20.42 *)
: (* test109.lgf:20.42-test109.lgf:20.43 *)
(* TYVAR_NAME *) 'b (* test109.lgf:20.44-test109.lgf:20.46 *)
) (* test109.lgf:20.46-test109.lgf:20.47 *)
( (* test109.lgf:20.48-test109.lgf:20.49 *)
(* VAR_NAME *) l (* test109.lgf:20.49-test109.lgf:20.50 *)
: (* test109.lgf:20.50-test109.lgf:20.51 *)
(* CON_NAME *) List (* test109.lgf:20.52-test109.lgf:20.56 *)
[ (* test109.lgf:20.57-test109.lgf:20.58 *)
(* TYVAR_NAME *) 'a (* test109.lgf:20.58-test109.lgf:20.60 *)
] (* test109.lgf:20.60-test109.lgf:20.61 *)
) (* test109.lgf:20.61-test109.lgf:20.62 *)
: (* test109.lgf:20.63-test109.lgf:20.64 *)
(* TYVAR_NAME *) 'b (* test109.lgf:20.65-test109.lgf:20.67 *)
= (* test109.lgf:20.68-test109.lgf:20.69 *)
case (* test109.lgf:21.2-test109.lgf:21.6 *)
(* VAR_NAME *) l (* test109.lgf:21.7-test109.lgf:21.8 *)
of (* test109.lgf:21.9-test109.lgf:21.11 *)
(* CON_NAME *) Nil (* test109.lgf:22.5-test109.lgf:22.8 *)
[ (* test109.lgf:22.9-test109.lgf:22.10 *)
(* TYVAR_NAME *) 'a (* test109.lgf:22.10-test109.lgf:22.12 *)
] (* test109.lgf:22.12-test109.lgf:22.13 *)
=> (* test109.lgf:22.14-test109.lgf:22.16 *)
(* VAR_NAME *) b (* test109.lgf:22.17-test109.lgf:22.18 *)
| (* test109.lgf:23.3-test109.lgf:23.4 *)
(* CON_NAME *) Cons (* test109.lgf:23.5-test109.lgf:23.9 *)
[ (* test109.lgf:23.10-test109.lgf:23.11 *)
(* TYVAR_NAME *) 'a (* test109.lgf:23.11-test109.lgf:23.13 *)
] (* test109.lgf:23.13-test109.lgf:23.14 *)
{ (* test109.lgf:23.15-test109.lgf:23.16 *)
(* VAR_NAME *) hd (* test109.lgf:23.16-test109.lgf:23.18 *)
, (* test109.lgf:23.18-test109.lgf:23.19 *)
(* VAR_NAME *) tl (* test109.lgf:23.20-test109.lgf:23.22 *)
} (* test109.lgf:23.22-test109.lgf:23.23 *)
=> (* test109.lgf:23.24-test109.lgf:23.26 *)
(* VAR_NAME *) foldl (* test109.lgf:23.27-test109.lgf:23.32 *)
[ (* test109.lgf:23.33-test109.lgf:23.34 *)
(* TYVAR_NAME *) 'a (* test109.lgf:23.34-test109.lgf:23.36 *)
] (* test109.lgf:23.36-test109.lgf:23.37 *)
[ (* test109.lgf:23.38-test109.lgf:23.39 *)
(* TYVAR_NAME *) 'b (* test109.lgf:23.39-test109.lgf:23.41 *)
] (* test109.lgf:23.41-test109.lgf:23.42 *)
(* VAR_NAME *) f (* test109.lgf:23.43-test109.lgf:23.44 *)
( (* test109.lgf:23.45-test109.lgf:23.46 *)
(* VAR_NAME *) f (* test109.lgf:23.46-test109.lgf:23.47 *)
(* VAR_NAME *) hd (* test109.lgf:23.48-test109.lgf:23.50 *)
(* VAR_NAME *) b (* test109.lgf:23.51-test109.lgf:23.52 *)
) (* test109.lgf:23.52-test109.lgf:23.53 *)
(* VAR_NAME *) tl (* test109.lgf:23.54-test109.lgf:23.56 *)
end (* test109.lgf:24.2-test109.lgf:24.5 *)
val (* test109.lgf:26.0-test109.lgf:26.3 *)
(* VAR_NAME *) rev (* test109.lgf:26.4-test109.lgf:26.7 *)
= (* test109.lgf:26.8-test109.lgf:26.9 *)
fn (* test109.lgf:26.10-test109.lgf:26.12 *)
[ (* test109.lgf:26.13-test109.lgf:26.14 *)
(* TYVAR_NAME *) 'a (* test109.lgf:26.14-test109.lgf:26.16 *)
] (* test109.lgf:26.16-test109.lgf:26.17 *)
=> (* test109.lgf:26.18-test109.lgf:26.20 *)
(* VAR_NAME *) foldl (* test109.lgf:27.3-test109.lgf:27.8 *)
[ (* test109.lgf:27.9-test109.lgf:27.10 *)
(* TYVAR_NAME *) 'a (* test109.lgf:27.10-test109.lgf:27.12 *)
] (* test109.lgf:27.12-test109.lgf:27.13 *)
[ (* test109.lgf:27.14-test109.lgf:27.15 *)
(* CON_NAME *) List (* test109.lgf:27.15-test109.lgf:27.19 *)
[ (* test109.lgf:27.20-test109.lgf:27.21 *)
(* TYVAR_NAME *) 'a (* test109.lgf:27.21-test109.lgf:27.23 *)
] (* test109.lgf:27.23-test109.lgf:27.24 *)
] (* test109.lgf:27.24-test109.lgf:27.25 *)
( (* test109.lgf:28.9-test109.lgf:28.10 *)
fn (* test109.lgf:28.10-test109.lgf:28.12 *)
( (* test109.lgf:28.13-test109.lgf:28.14 *)
(* VAR_NAME *) hd (* test109.lgf:28.14-test109.lgf:28.16 *)
: (* test109.lgf:28.16-test109.lgf:28.17 *)
(* TYVAR_NAME *) 'a (* test109.lgf:28.18-test109.lgf:28.20 *)
) (* test109.lgf:28.20-test109.lgf:28.21 *)
( (* test109.lgf:28.22-test109.lgf:28.23 *)
(* VAR_NAME *) tl (* test109.lgf:28.23-test109.lgf:28.25 *)
: (* test109.lgf:28.25-test109.lgf:28.26 *)
(* CON_NAME *) List (* test109.lgf:28.27-test109.lgf:28.31 *)
[ (* test109.lgf:28.32-test109.lgf:28.33 *)
(* TYVAR_NAME *) 'a (* test109.lgf:28.33-test109.lgf:28.35 *)
] (* test109.lgf:28.35-test109.lgf:28.36 *)
) (* test109.lgf:28.36-test109.lgf:28.37 *)
=> (* test109.lgf:28.38-test109.lgf:28.40 *)
(* CON_NAME *) Cons (* test109.lgf:28.41-test109.lgf:28.45 *)
[ (* test109.lgf:28.46-test109.lgf:28.47 *)
(* TYVAR_NAME *) 'a (* test109.lgf:28.47-test109.lgf:28.49 *)
] (* test109.lgf:28.49-test109.lgf:28.50 *)
{ (* test109.lgf:28.51-test109.lgf:28.52 *)
(* VAR_NAME *) hd (* test109.lgf:28.52-test109.lgf:28.54 *)
, (* test109.lgf:28.54-test109.lgf:28.55 *)
(* VAR_NAME *) tl (* test109.lgf:28.56-test109.lgf:28.58 *)
} (* test109.lgf:28.58-test109.lgf:28.59 *)
) (* test109.lgf:28.59-test109.lgf:28.60 *)
( (* test109.lgf:29.9-test109.lgf:29.10 *)
(* CON_NAME *) Nil (* test109.lgf:29.10-test109.lgf:29.13 *)
[ (* test109.lgf:29.14-test109.lgf:29.15 *)
(* TYVAR_NAME *) 'a (* test109.lgf:29.15-test109.lgf:29.17 *)
] (* test109.lgf:29.17-test109.lgf:29.18 *)
) (* test109.lgf:29.18-test109.lgf:29.19 *)
fun (* test109.lgf:31.0-test109.lgf:31.3 *)
(* VAR_NAME *) tabulate (* test109.lgf:31.4-test109.lgf:31.12 *)
[ (* test109.lgf:31.13-test109.lgf:31.14 *)
(* TYVAR_NAME *) 'a (* test109.lgf:31.14-test109.lgf:31.16 *)
] (* test109.lgf:31.16-test109.lgf:31.17 *)
( (* test109.lgf:31.18-test109.lgf:31.19 *)
(* VAR_NAME *) n (* test109.lgf:31.19-test109.lgf:31.20 *)
: (* test109.lgf:31.20-test109.lgf:31.21 *)
(* CON_NAME *) Integer (* test109.lgf:31.22-test109.lgf:31.29 *)
) (* test109.lgf:31.29-test109.lgf:31.30 *)
( (* test109.lgf:31.31-test109.lgf:31.32 *)
(* VAR_NAME *) f (* test109.lgf:31.32-test109.lgf:31.33 *)
: (* test109.lgf:31.33-test109.lgf:31.34 *)
(* CON_NAME *) Integer (* test109.lgf:31.35-test109.lgf:31.42 *)
-> (* test109.lgf:31.43-test109.lgf:31.45 *)
(* TYVAR_NAME *) 'a (* test109.lgf:31.46-test109.lgf:31.48 *)
) (* test109.lgf:31.48-test109.lgf:31.49 *)
: (* test109.lgf:31.50-test109.lgf:31.51 *)
(* CON_NAME *) List (* test109.lgf:31.52-test109.lgf:31.56 *)
[ (* test109.lgf:31.57-test109.lgf:31.58 *)
(* TYVAR_NAME *) 'a (* test109.lgf:31.58-test109.lgf:31.60 *)
] (* test109.lgf:31.60-test109.lgf:31.61 *)
= (* test109.lgf:31.62-test109.lgf:31.63 *)
let (* test109.lgf:32.2-test109.lgf:32.5 *)
fun (* test109.lgf:33.5-test109.lgf:33.8 *)
(* VAR_NAME *) loop (* test109.lgf:33.9-test109.lgf:33.13 *)
( (* test109.lgf:33.14-test109.lgf:33.15 *)
(* VAR_NAME *) i (* test109.lgf:33.15-test109.lgf:33.16 *)
: (* test109.lgf:33.16-test109.lgf:33.17 *)
(* CON_NAME *) Integer (* test109.lgf:33.18-test109.lgf:33.25 *)
) (* test109.lgf:33.25-test109.lgf:33.26 *)
( (* test109.lgf:33.27-test109.lgf:33.28 *)
(* VAR_NAME *) acc (* test109.lgf:33.28-test109.lgf:33.31 *)
: (* test109.lgf:33.31-test109.lgf:33.32 *)
(* CON_NAME *) List (* test109.lgf:33.33-test109.lgf:33.37 *)
[ (* test109.lgf:33.38-test109.lgf:33.39 *)
(* TYVAR_NAME *) 'a (* test109.lgf:33.39-test109.lgf:33.41 *)
] (* test109.lgf:33.41-test109.lgf:33.42 *)
) (* test109.lgf:33.42-test109.lgf:33.43 *)
: (* test109.lgf:33.44-test109.lgf:33.45 *)
(* CON_NAME *) List (* test109.lgf:33.46-test109.lgf:33.50 *)
[ (* test109.lgf:33.51-test109.lgf:33.52 *)
(* TYVAR_NAME *) 'a (* test109.lgf:33.52-test109.lgf:33.54 *)
] (* test109.lgf:33.54-test109.lgf:33.55 *)
= (* test109.lgf:33.56-test109.lgf:33.57 *)
if (* test109.lgf:34.7-test109.lgf:34.9 *)
(* VAR_NAME *) i (* test109.lgf:34.10-test109.lgf:34.11 *)
<= (* test109.lgf:34.12-test109.lgf:34.14 *)
(* VAR_NAME *) n (* test109.lgf:34.15-test109.lgf:34.16 *)
then (* test109.lgf:35.10-test109.lgf:35.14 *)
(* VAR_NAME *) loop (* test109.lgf:35.15-test109.lgf:35.19 *)
( (* test109.lgf:35.20-test109.lgf:35.21 *)
(* VAR_NAME *) i (* test109.lgf:35.21-test109.lgf:35.22 *)
+ (* test109.lgf:35.23-test109.lgf:35.24 *)
(* INTEGER *) 1 (* test109.lgf:35.25-test109.lgf:35.26 *)
) (* test109.lgf:35.26-test109.lgf:35.27 *)
( (* test109.lgf:35.28-test109.lgf:35.29 *)
(* CON_NAME *) Cons (* test109.lgf:35.29-test109.lgf:35.33 *)
[ (* test109.lgf:35.34-test109.lgf:35.35 *)
(* TYVAR_NAME *) 'a (* test109.lgf:35.35-test109.lgf:35.37 *)
] (* test109.lgf:35.37-test109.lgf:35.38 *)
{ (* test109.lgf:35.39-test109.lgf:35.40 *)
(* VAR_NAME *) f (* test109.lgf:35.40-test109.lgf:35.41 *)
(* VAR_NAME *) i (* test109.lgf:35.42-test109.lgf:35.43 *)
, (* test109.lgf:35.43-test109.lgf:35.44 *)
(* VAR_NAME *) acc (* test109.lgf:35.45-test109.lgf:35.48 *)
} (* test109.lgf:35.48-test109.lgf:35.49 *)
) (* test109.lgf:35.49-test109.lgf:35.50 *)
else (* test109.lgf:36.7-test109.lgf:36.11 *)
(* VAR_NAME *) rev (* test109.lgf:36.12-test109.lgf:36.15 *)
[ (* test109.lgf:36.16-test109.lgf:36.17 *)
(* TYVAR_NAME *) 'a (* test109.lgf:36.17-test109.lgf:36.19 *)
] (* test109.lgf:36.19-test109.lgf:36.20 *)
(* VAR_NAME *) acc (* test109.lgf:36.21-test109.lgf:36.24 *)
in (* test109.lgf:37.2-test109.lgf:37.4 *)
if (* test109.lgf:38.5-test109.lgf:38.7 *)
(* VAR_NAME *) n (* test109.lgf:38.8-test109.lgf:38.9 *)
< (* test109.lgf:38.10-test109.lgf:38.11 *)
(* INTEGER *) 0 (* test109.lgf:38.12-test109.lgf:38.13 *)
then (* test109.lgf:39.8-test109.lgf:39.12 *)
(* VAR_NAME *) fail (* test109.lgf:39.13-test109.lgf:39.17 *)
[ (* test109.lgf:39.18-test109.lgf:39.19 *)
(* CON_NAME *) List (* test109.lgf:39.19-test109.lgf:39.23 *)
[ (* test109.lgf:39.24-test109.lgf:39.25 *)
(* TYVAR_NAME *) 'a (* test109.lgf:39.25-test109.lgf:39.27 *)
] (* test109.lgf:39.27-test109.lgf:39.28 *)
] (* test109.lgf:39.28-test109.lgf:39.29 *)
(* STRING *) "tabulate: n < 0" (* test109.lgf:39.30-test109.lgf:39.47 *)
else (* test109.lgf:40.5-test109.lgf:40.9 *)
(* VAR_NAME *) loop (* test109.lgf:40.10-test109.lgf:40.14 *)
(* INTEGER *) 0 (* test109.lgf:40.15-test109.lgf:40.16 *)
( (* test109.lgf:40.17-test109.lgf:40.18 *)
(* CON_NAME *) Nil (* test109.lgf:40.18-test109.lgf:40.21 *)
[ (* test109.lgf:40.22-test109.lgf:40.23 *)
(* TYVAR_NAME *) 'a (* test109.lgf:40.23-test109.lgf:40.25 *)
] (* test109.lgf:40.25-test109.lgf:40.26 *)
) (* test109.lgf:40.26-test109.lgf:40.27 *)
end (* test109.lgf:41.2-test109.lgf:41.5 *)
val (* test109.lgf:43.0-test109.lgf:43.3 *)
(* VAR_NAME *) n (* test109.lgf:43.4-test109.lgf:43.5 *)
= (* test109.lgf:43.6-test109.lgf:43.7 *)
(* INTEGER *) 4999 (* test109.lgf:43.8-test109.lgf:43.12 *)
val (* test109.lgf:44.0-test109.lgf:44.3 *)
(* VAR_NAME *) sum_n (* test109.lgf:44.4-test109.lgf:44.9 *)
= (* test109.lgf:44.10-test109.lgf:44.11 *)
(* VAR_NAME *) foldl (* test109.lgf:45.3-test109.lgf:45.8 *)
[ (* test109.lgf:45.9-test109.lgf:45.10 *)
(* CON_NAME *) Integer (* test109.lgf:45.10-test109.lgf:45.17 *)
] (* test109.lgf:45.17-test109.lgf:45.18 *)
[ (* test109.lgf:45.19-test109.lgf:45.20 *)
(* CON_NAME *) Integer (* test109.lgf:45.20-test109.lgf:45.27 *)
] (* test109.lgf:45.27-test109.lgf:45.28 *)
( (* test109.lgf:46.9-test109.lgf:46.10 *)
fn (* test109.lgf:46.10-test109.lgf:46.12 *)
( (* test109.lgf:46.13-test109.lgf:46.14 *)
(* VAR_NAME *) x (* test109.lgf:46.14-test109.lgf:46.15 *)
: (* test109.lgf:46.15-test109.lgf:46.16 *)
(* CON_NAME *) Integer (* test109.lgf:46.17-test109.lgf:46.24 *)
) (* test109.lgf:46.24-test109.lgf:46.25 *)
( (* test109.lgf:46.26-test109.lgf:46.27 *)
(* VAR_NAME *) y (* test109.lgf:46.27-test109.lgf:46.28 *)
: (* test109.lgf:46.28-test109.lgf:46.29 *)
(* CON_NAME *) Integer (* test109.lgf:46.30-test109.lgf:46.37 *)
) (* test109.lgf:46.37-test109.lgf:46.38 *)
=> (* test109.lgf:46.39-test109.lgf:46.41 *)
(* VAR_NAME *) x (* test109.lgf:46.42-test109.lgf:46.43 *)
+ (* test109.lgf:46.44-test109.lgf:46.45 *)
(* VAR_NAME *) y (* test109.lgf:46.46-test109.lgf:46.47 *)
) (* test109.lgf:46.47-test109.lgf:46.48 *)
(* INTEGER *) 0 (* test109.lgf:47.9-test109.lgf:47.10 *)
( (* test109.lgf:48.9-test109.lgf:48.10 *)
(* VAR_NAME *) tabulate (* test109.lgf:48.10-test109.lgf:48.18 *)
[ (* test109.lgf:48.19-test109.lgf:48.20 *)
(* CON_NAME *) Integer (* test109.lgf:48.20-test109.lgf:48.27 *)
] (* test109.lgf:48.27-test109.lgf:48.28 *)
(* VAR_NAME *) n (* test109.lgf:48.29-test109.lgf:48.30 *)
( (* test109.lgf:48.31-test109.lgf:48.32 *)
fn (* test109.lgf:48.32-test109.lgf:48.34 *)
( (* test109.lgf:48.35-test109.lgf:48.36 *)
(* VAR_NAME *) i (* test109.lgf:48.36-test109.lgf:48.37 *)
: (* test109.lgf:48.37-test109.lgf:48.38 *)
(* CON_NAME *) Integer (* test109.lgf:48.39-test109.lgf:48.46 *)
) (* test109.lgf:48.46-test109.lgf:48.47 *)
=> (* test109.lgf:48.48-test109.lgf:48.50 *)
(* VAR_NAME *) i (* test109.lgf:48.51-test109.lgf:48.52 *)
) (* test109.lgf:48.52-test109.lgf:48.53 *)
) (* test109.lgf:48.53-test109.lgf:48.54 *)
; (* test109.lgf:50.0-test109.lgf:50.1 *)
( (* test109.lgf:52.0-test109.lgf:52.1 *)
(* VAR_NAME *) print (* test109.lgf:52.1-test109.lgf:52.6 *)
(* STRING *) "foldl [Integer] [Integer]\n" (* test109.lgf:52.7-test109.lgf:52.36 *)
; (* test109.lgf:52.36-test109.lgf:52.37 *)
(* VAR_NAME *) print (* test109.lgf:53.1-test109.lgf:53.6 *)
(* STRING *) "      (fn (x: Integer) (y: Integer) => x + y)\n" (* test109.lgf:53.7-test109.lgf:53.56 *)
; (* test109.lgf:53.56-test109.lgf:53.57 *)
(* VAR_NAME *) print (* test109.lgf:54.1-test109.lgf:54.6 *)
(* STRING *) "      0 (tabulate [Integer] " (* test109.lgf:54.7-test109.lgf:54.37 *)
; (* test109.lgf:54.37-test109.lgf:54.38 *)
(* VAR_NAME *) print (* test109.lgf:55.1-test109.lgf:55.6 *)
( (* test109.lgf:55.7-test109.lgf:55.8 *)
(* VAR_NAME *) intToString (* test109.lgf:55.8-test109.lgf:55.19 *)
(* VAR_NAME *) n (* test109.lgf:55.20-test109.lgf:55.21 *)
) (* test109.lgf:55.21-test109.lgf:55.22 *)
; (* test109.lgf:55.22-test109.lgf:55.23 *)
(* VAR_NAME *) print (* test109.lgf:56.1-test109.lgf:56.6 *)
(* STRING *) " (fn (i: Integer) => i)) = " (* test109.lgf:56.7-test109.lgf:56.36 *)
; (* test109.lgf:56.36-test109.lgf:56.37 *)
(* VAR_NAME *) print (* test109.lgf:57.1-test109.lgf:57.6 *)
( (* test109.lgf:57.7-test109.lgf:57.8 *)
(* VAR_NAME *) intToString (* test109.lgf:57.8-test109.lgf:57.19 *)
(* VAR_NAME *) sum_n (* test109.lgf:57.20-test109.lgf:57.25 *)
) (* test109.lgf:57.25-test109.lgf:57.26 *)
; (* test109.lgf:57.26-test109.lgf:57.27 *)
(* VAR_NAME *) print (* test109.lgf:58.1-test109.lgf:58.6 *)
(* STRING *) "\n" (* test109.lgf:58.7-test109.lgf:58.11 *)
) (* test109.lgf:58.11-test109.lgf:58.12 *)
