datatype Option ['a] = None
                     | Some {'a}
datatype Pair ['a1, 'a2] = Pair {'a1, 'a2}
val pair = fn ['a1] ['a2] (x : 'a1) (y : 'a2) => (Pair ['a1, 'a2] {x, y})
val fst = fn ['a1] ['a2] (p : Pair ['a1, 'a2]) => (case p of Pair ['a1, 'a2] {x1, x2} => x1 end)
val snd = fn ['a1] ['a2] (p : Pair ['a1, 'a2]) => (case p of Pair ['a1, 'a2] {x1, x2} => x2 end)
datatype RList ['a] = RNil
                    | RZero {RList [Pair ['a, 'a]]}
                    | ROne {'a, RList [Pair ['a, 'a]]}
val rlistEmpty = fn ['a] => (RNil ['a])
val rlistIsEmpty = fn ['a] (l : RList ['a]) => (case l of RNil ['a] => True | _ => False end)
fun rlistCons ['a] (x : 'a) (l : RList ['a]) : RList ['a] =
   case l of
      RNil ['a] => ROne ['a] {x, RNil [Pair ['a, 'a]]}
    | RZero ['a] {ps} => ROne ['a] {x, ps}
    | ROne ['a] {y, ps} => RZero ['a] {((rlistCons [Pair ['a, 'a]]) ((((pair ['a]) ['a]) x) y)) ps}
   end
fun rlistUncons ['a] (l : RList ['a]) : Pair ['a, RList ['a]] =
   case l of
      RNil ['a] => (fail [Pair ['a, RList ['a]]]) "rlistUncons: RNil"
    | ROne ['a] {x, ps} =>
         case ps of
            RNil [Pair ['a, 'a]] => Pair ['a, RList ['a]] {x, RNil ['a]}
          | _ => Pair ['a, RList ['a]] {x, RZero ['a] {ps}}
         end
    | RZero ['a] {ps} =>
         let
            val xy_ps' = (rlistUncons [Pair ['a, 'a]]) ps
            val xy = ((fst [Pair ['a, 'a]]) [RList [Pair ['a, 'a]]]) xy_ps'
            val x = ((fst ['a]) ['a]) xy
            val y = ((snd ['a]) ['a]) xy
            val ps' = ((snd [Pair ['a, 'a]]) [RList [Pair ['a, 'a]]]) xy_ps'
         in
            (((pair ['a]) [RList ['a]]) x) (ROne ['a] {y, ps'})
         end
   end
val rlistHd = fn ['a] (l : RList ['a]) => (((fst ['a]) [RList ['a]]) ((rlistUncons ['a]) l))
val rlistTl = fn ['a] (l : RList ['a]) => (((snd ['a]) [RList ['a]]) ((rlistUncons ['a]) l))
fun rlistSize ['a] (l : RList ['a]) : Integer =
   case l of
      RNil ['a] => 0
    | ROne ['a] {x, ps} => 1 + (2 * ((rlistSize [Pair ['a, 'a]]) ps))
    | RZero ['a] {ps} => 2 * ((rlistSize [Pair ['a, 'a]]) ps)
   end
fun rlistLookup ['a] (i : Integer) (l : RList ['a]) : 'a =
   case l of
      RNil ['a] => (fail ['a]) "rlistLookup: RNil"
    | ROne ['a] {x, ps} => if i == 0 then x else (((rlistLookup ['a]) (i - 1)) (RZero ['a] {ps}))
    | RZero ['a] {ps} =>
         let
            val xy = ((rlistLookup [Pair ['a, 'a]]) (i / 2)) ps
         in
            if (i % 2) == 0 then ((fst ['a]) ['a]) xy else (((snd ['a]) ['a]) xy)
         end
   end
fun rlistUpdateF ['a] (i : Integer) (f : 'a -> 'a) (l : RList ['a]) : RList ['a] =
   case l of
      RNil ['a] => (fail [RList ['a]]) "rlistUpdateF: RNil"
    | ROne ['a] {x, ps} =>
         if i == 0 then ROne ['a] {f x, ps} else (((rlistCons ['a]) x) ((((rlistUpdateF ['a]) (i - 1)) f) (RZero ['a] {ps})))
    | RZero ['a] {ps} =>
         let
            val f' =
               fn (xy : Pair ['a, 'a]) =>
                  (let
                      val x = ((fst ['a]) ['a]) xy
                      val y = ((snd ['a]) ['a]) xy
                   in
                      if (i % 2) == 0 then (((pair ['a]) ['a]) (f x)) y else ((((pair ['a]) ['a]) x) (f y))
                   end)
         in
            RZero ['a] {(((rlistUpdateF [Pair ['a, 'a]]) (i / 2)) f') ps}
         end
   end
val rlistUpdate = fn ['a] (i : Integer) (y : 'a) (l : RList ['a]) => ((((rlistUpdateF ['a]) i) (fn (x : 'a) => y)) l)
fun rlistAllocate ['a] (i : Integer) (v : 'a) : RList ['a] =
   let
      fun loop (l : RList ['a]) (j : Integer) : RList ['a] = if j < 0 then l else ((loop (((rlistCons ['a]) v) l)) (j - 1))
      val l = (loop (rlistEmpty ['a])) (i - 1)
   in
      l
   end
fun intToString (i : Integer) : String =
   if i < 0
      then "~" ^ (intToString (~ i))
      else (if i == 0
               then "0"
               else (if i == 1
                        then "1"
                        else (if i == 2
                                 then "2"
                                 else (if i == 3
                                          then "3"
                                          else (if i == 4
                                                   then "4"
                                                   else (if i == 5
                                                            then "5"
                                                            else (if i == 6
                                                                     then "6"
                                                                     else (if i == 7
                                                                              then "7"
                                                                              else (if i == 8
                                                                                       then "8"
                                                                                       else (if i == 9
                                                                                                then "9"
                                                                                                else ((intToString (i / 10))
                                                                                                      ^
                                                                                                      (intToString (i % 10)))))))))))))
val ord0 = (subscript "0") 0
val ord9 = (subscript "9") 0
fun charToDigit (c : Integer) : Option [Integer] =
   if (ord0 <= c) andalso (c <= ord9) then Some [Integer] {c - ord0} else (None [Integer])
fun stringToInt (s : String) : Option [Integer] =
   let
      val sz = size s
      fun loop (pos : Integer) (acc : Integer) : Option [Integer] =
         if pos < sz
            then case charToDigit ((subscript s) pos) of
                    None [Integer] => None [Integer]
                  | Some [Integer] {i} => (loop (pos + 1)) ((acc * 10) + i)
                 end
            else (Some [Integer] {acc})
   in
      if sz > 0 then (loop 0) 0 else (None [Integer])
   end
val fib : Integer -> Integer =
   let
      val a = ((rlistAllocate [Option [Integer]]) 2) (None [Integer])
      fun expand (old : RList [Option [Integer]]) : RList [Option [Integer]] =
         let
            val new = ((rlistAllocate [Option [Integer]]) (2 * ((rlistSize [Option [Integer]]) old))) (None [Integer])
            fun loop (new : RList [Option [Integer]]) (i : Integer) : RList [Option [Integer]] =
               if i < ((rlistSize [Option [Integer]]) old)
                  then (loop ((((rlistUpdate [Option [Integer]]) i) (((rlistLookup [Option [Integer]]) i) old)) new)) (i + 1)
                  else new
         in
            (loop new) 0
         end
      val a = (((rlistUpdate [Option [Integer]]) 0) (Some [Integer] {1})) a
      val a = (((rlistUpdate [Option [Integer]]) 1) (Some [Integer] {1})) a
      fun fib (a : RList [Option [Integer]]) (i : Integer) : Pair [Integer, RList [Option [Integer]]] =
         if i < 0
            then Pair [Integer, RList [Option [Integer]]] {~1, a}
            else (if i < ((rlistSize [Option [Integer]]) a)
                     then case ((rlistLookup [Option [Integer]]) i) a of
                             Some [Integer] {r} => Pair [Integer, RList [Option [Integer]]] {r, a}
                           | None [Integer] =>
                                case (fib a) (i - 1) of
                                   Pair [Integer, RList [Option [Integer]]] {x, a} =>
                                      case (fib a) (i - 2) of
                                         Pair [Integer, RList [Option [Integer]]] {y, a} =>
                                            let
                                               val r = x + y
                                               val a = (((rlistUpdate [Option [Integer]]) i) (Some [Integer] {r})) a
                                            in
                                               Pair [Integer, RList [Option [Integer]]] {r, a}
                                            end
                                      end
                                end
                          end
                     else ((fib (expand a)) i))
   in
      fn (i : Integer) => (((fst [Integer]) [RList [Option [Integer]]]) ((fib a) i))
   end
val s = if (argc Unit) > 1 then arg 1 else "42"
;
case stringToInt s of
   None [Integer] => Unit
 | Some [Integer] {i} => print ("fib(" ^ ((intToString i) ^ (") = " ^ ((intToString (fib i)) ^ "\n"))))
end
