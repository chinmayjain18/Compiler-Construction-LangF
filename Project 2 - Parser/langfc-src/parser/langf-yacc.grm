(* langfc-src/scanner-parser/langf-yacc.grm
 *
 * COPYRIGHT (c) 2011-2015 Matthew Fluet (http://www.cs.rit.edu/~mtf)
 * All rights reserved.
 *
 * Rochester Institute of Technology
 * 4005-711,CSCI-742
 * Q20112,Q20122,S20135,S20145
 *
 * COPYRIGHT (c) 2009 Matthew Fluet (http://tti-c.org/fluet)
 * All rights reserved.
 *
 * University of Chicago
 * CMSC 22610
 * Winter 2009
 *
 * LangF parser specification for ml-yacc.
 *)

(* User declarations; available in semantic actions. *)
structure PT = ParseTree

%%

%name LangFYacc
%verbose
%pure

%pos Source.Pos.t
%eop EOF
%noshift EOF

(* Tokens. *)
%term
    KW_and
  | KW_andalso
  | KW_case
  | KW_datatype
  | KW_else
  | KW_end
  | KW_fn
  | KW_fun
  | KW_if
  | KW_in
  | KW_let
  | KW_of
  | KW_orelse
  | KW_then
  | KW_type
  | KW_val
  | PLUS
  | MINUS
  | ASTERISK
  | SLASH
  | PERCENT
  | TILDE
  | EQEQ
  | LTGT
  | LTEQ
  | LT
  | GTEQ
  | GT
  | CARET
  | HASH
  | BANG
  | COLON_EQ
  | LPAREN
  | RPAREN
  | LSBRACK
  | RSBRACK
  | LCBRACK
  | RCBRACK
  | MINUS_ARROW
  | EQ_ARROW
  | EQ
  | COLON
  | COMMA
  | SEMI
  | VBAR
  | UNDERSCORE
  | TYVAR_NAME of Atom.atom
  | CON_NAME of Atom.atom
  | VAR_NAME of Atom.atom
  | INTEGER of IntInf.int
  | STRING of String.string
  | EOF

(* Keyword tokens, for error recovery. *)
%keyword
    KW_and
    KW_andalso
    KW_case
    KW_datatype
    KW_else
    KW_end
    KW_fn
    KW_fun
    KW_if
    KW_in
    KW_let
    KW_of
    KW_orelse
    KW_then
    KW_type
    KW_val
(* Value-carrying tokens, for error recovery. *)
%value TYVAR_NAME (Atom.atom "'bogus")
%value CON_NAME (Atom.atom "Bogus")
%value VAR_NAME (Atom.atom "bogus")
%value INTEGER (IntInf.fromInt 0)
%value STRING ("")

(* Non-terminals, with type produced by semantic action; to be extended. *)
%nonterm
    Program of PT.Prog.t
  | DeclStar of PT.Decl.t list
  | Decl of PT.Decl.t
  | TypeParams of PT.TyVarName.t list
  | Type of PT.Type.t
  | Exp of PT.Exp.t
  | ComplexExp of PT.Exp.t
  | SimpleExp of PT.Exp.t
  | ApplyExp of PT.Exp.t
  | AtomicExp of PT.Exp.t
  | TyVarName of PT.TyVarName.t
  | TyConName of PT.TyConName.t

(* Start non-terminal. *)
%start Program

%%

(* Rules; to be extended. *)

Program
  : DeclStar SEMI Exp ( 
      PT.Prog.make ((DeclStar,Exp), (DeclStarleft, Expright)) )
  | Exp ( 
      PT.Prog.make (([],Exp), (Expleft, Expright)) )

DeclStar
  : (* empty *) ( [] )
  | Decl DeclStar ( Decl::DeclStar )

Decl
  : KW_type TyConName TypeParams EQ Type (
      PT.Decl.make (PT.Decl.D_Type (TyConName, TypeParams, Type),
                    (KW_typeleft, Typeright)) )

TypeParams
  : (* empty *) ( [] )

Type
  : TyVarName (
      PT.Type.make (PT.Type.T_TyVar TyVarName, (TyVarNameleft, TyVarNameright)) )

Exp
  : ComplexExp ( ComplexExp )

ComplexExp
  : SimpleExp ( SimpleExp )

SimpleExp
  : ApplyExp ( ApplyExp )

ApplyExp
  : AtomicExp ( AtomicExp )

AtomicExp
  : INTEGER (
      PT.Exp.make (PT.Exp.E_Integer INTEGER, (INTEGERleft, INTEGERright)) )


TyVarName
  : TYVAR_NAME ( PT.TyVarName.make (TYVAR_NAME, (TYVAR_NAMEleft, TYVAR_NAMEright)) )

TyConName
  : CON_NAME ( PT.TyConName.make (CON_NAME, (CON_NAMEleft, CON_NAMEright)) )

(*
DaConName
  : CON_NAME ( PT.DaConName.make (CON_NAME, (CON_NAMEleft, CON_NAMEright)) )

VarName
  : VAR_NAME ( PT.VarName.make (VAR_NAME, (VAR_NAMEleft, VAR_NAMEright)) )

*)
