fun
(* VAR_NAME *) intToString
(
(* VAR_NAME *) i
:
(* CON_NAME *) Integer
)
:
(* CON_NAME *) String
=
if
(* VAR_NAME *) i
<
(* INTEGER *) 0
then
(* STRING *) "~"
^
(
(* VAR_NAME *) intToString
(
~
(* VAR_NAME *) i
)
)
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 0
then
(* STRING *) "0"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 1
then
(* STRING *) "1"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 2
then
(* STRING *) "2"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 3
then
(* STRING *) "3"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 4
then
(* STRING *) "4"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 5
then
(* STRING *) "5"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 6
then
(* STRING *) "6"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 7
then
(* STRING *) "7"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 8
then
(* STRING *) "8"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 9
then
(* STRING *) "9"
else
(
(* VAR_NAME *) intToString
(
(* VAR_NAME *) i
/
(* INTEGER *) 10
)
)
^
(
(* VAR_NAME *) intToString
(
(* VAR_NAME *) i
%
(* INTEGER *) 10
)
)
fun
(* VAR_NAME *) arrayToString
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) aToString
:
(* TYVAR_NAME *) 'a
->
(* CON_NAME *) String
)
(
(* VAR_NAME *) a
:
(* CON_NAME *) Array
[
(* TYVAR_NAME *) 'a
]
)
:
(* CON_NAME *) String
=
if
#
(* VAR_NAME *) a
==
(* INTEGER *) 0
then
(* STRING *) "[]"
else
let
fun
(* VAR_NAME *) loop
(
(* VAR_NAME *) i
:
(* CON_NAME *) Integer
)
(
(* VAR_NAME *) acc
:
(* CON_NAME *) String
)
:
(* CON_NAME *) String
=
if
(* VAR_NAME *) i
<
#
(* VAR_NAME *) a
then
(* VAR_NAME *) loop
(
(* VAR_NAME *) i
+
(* INTEGER *) 1
)
(
(* VAR_NAME *) acc
^
(* STRING *) ", "
^
(
(* VAR_NAME *) aToString
(
(* VAR_NAME *) a
!
(* VAR_NAME *) i
)
)
)
else
(* VAR_NAME *) acc
in
(
(* VAR_NAME *) loop
(* INTEGER *) 1
(
(* STRING *) "["
^
(
(* VAR_NAME *) aToString
(
(* VAR_NAME *) a
!
(* INTEGER *) 0
)
)
)
)
^
(* STRING *) "]"
end
fun
(* VAR_NAME *) isort
(
(* VAR_NAME *) a
:
(* CON_NAME *) Array
[
(* CON_NAME *) Integer
]
)
:
(* CON_NAME *) Unit
=
let
val
(* VAR_NAME *) n
=
#
(* VAR_NAME *) a
fun
(* VAR_NAME *) loopA
(
(* VAR_NAME *) i
:
(* CON_NAME *) Integer
)
:
(* CON_NAME *) Unit
=
if
(* VAR_NAME *) i
<
(* VAR_NAME *) n
then
let
val
(* VAR_NAME *) tmp
=
(* VAR_NAME *) a
!
(* VAR_NAME *) i
fun
(* VAR_NAME *) loopB
(
(* VAR_NAME *) j
:
(* CON_NAME *) Integer
)
:
(* CON_NAME *) Integer
=
if
(* VAR_NAME *) j
>=
(* INTEGER *) 0
andalso
(* VAR_NAME *) tmp
<
(
(* VAR_NAME *) a
!
(* VAR_NAME *) j
)
then
(
(* VAR_NAME *) a
!
(* VAR_NAME *) j
+
(* INTEGER *) 1
:=
(* VAR_NAME *) a
!
(* VAR_NAME *) j
;
(* VAR_NAME *) loopB
(
(* VAR_NAME *) j
-
(* INTEGER *) 1
)
)
else
(* VAR_NAME *) j
val
(* VAR_NAME *) j
=
(* VAR_NAME *) loopB
(
(* VAR_NAME *) i
-
(* INTEGER *) 1
)
in
(* VAR_NAME *) a
!
(* VAR_NAME *) j
+
(* INTEGER *) 1
:=
(* VAR_NAME *) tmp
;
(* VAR_NAME *) loopA
(
(* VAR_NAME *) i
+
(* INTEGER *) 1
)
end
else
(* CON_NAME *) Unit
in
(* VAR_NAME *) loopA
(* INTEGER *) 1
end
val
(* VAR_NAME *) a
=
(* VAR_NAME *) array
[
(* CON_NAME *) Integer
]
(* INTEGER *) 8
(* INTEGER *) 0
val
_
=
(* VAR_NAME *) a
!
(* INTEGER *) 0
:=
(* INTEGER *) 12
val
_
=
(* VAR_NAME *) a
!
(* INTEGER *) 1
:=
(* INTEGER *) 72
val
_
=
(* VAR_NAME *) a
!
(* INTEGER *) 2
:=
(* INTEGER *) 34
val
_
=
(* VAR_NAME *) a
!
(* INTEGER *) 3
:=
(* INTEGER *) 45
val
_
=
(* VAR_NAME *) a
!
(* INTEGER *) 4
:=
(* INTEGER *) 64
val
_
=
(* VAR_NAME *) a
!
(* INTEGER *) 5
:=
(* INTEGER *) 32
val
_
=
(* VAR_NAME *) a
!
(* INTEGER *) 6
:=
(* INTEGER *) 56
val
_
=
(* VAR_NAME *) a
!
(* INTEGER *) 7
:=
(* INTEGER *) 29
val
_
=
(* VAR_NAME *) print
(
(
(* VAR_NAME *) arrayToString
[
(* CON_NAME *) Integer
]
(* VAR_NAME *) intToString
(* VAR_NAME *) a
)
^
(* STRING *) "\n"
)
val
_
=
(* VAR_NAME *) isort
(* VAR_NAME *) a
val
_
=
(* VAR_NAME *) print
(
(
(* VAR_NAME *) arrayToString
[
(* CON_NAME *) Integer
]
(* VAR_NAME *) intToString
(* VAR_NAME *) a
)
^
(* STRING *) "\n"
)
;
(* CON_NAME *) Unit
