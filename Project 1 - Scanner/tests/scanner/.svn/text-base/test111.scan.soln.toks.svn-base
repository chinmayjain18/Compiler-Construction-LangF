datatype
(* CON_NAME *) Option
[
(* TYVAR_NAME *) 'a
]
=
(* CON_NAME *) None
|
(* CON_NAME *) Some
{
(* TYVAR_NAME *) 'a
}
datatype
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a1
,
(* TYVAR_NAME *) 'a2
]
=
(* CON_NAME *) Pair
{
(* TYVAR_NAME *) 'a1
,
(* TYVAR_NAME *) 'a2
}
val
(* VAR_NAME *) pair
=
fn
[
(* TYVAR_NAME *) 'a1
]
[
(* TYVAR_NAME *) 'a2
]
(
(* VAR_NAME *) x
:
(* TYVAR_NAME *) 'a1
)
(
(* VAR_NAME *) y
:
(* TYVAR_NAME *) 'a2
)
=>
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a1
,
(* TYVAR_NAME *) 'a2
]
{
(* VAR_NAME *) x
,
(* VAR_NAME *) y
}
val
(* VAR_NAME *) fst
=
fn
[
(* TYVAR_NAME *) 'a1
]
[
(* TYVAR_NAME *) 'a2
]
(
(* VAR_NAME *) p
:
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a1
,
(* TYVAR_NAME *) 'a2
]
)
=>
case
(* VAR_NAME *) p
of
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a1
,
(* TYVAR_NAME *) 'a2
]
{
(* VAR_NAME *) x1
,
(* VAR_NAME *) x2
}
=>
(* VAR_NAME *) x1
end
val
(* VAR_NAME *) snd
=
fn
[
(* TYVAR_NAME *) 'a1
]
[
(* TYVAR_NAME *) 'a2
]
(
(* VAR_NAME *) p
:
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a1
,
(* TYVAR_NAME *) 'a2
]
)
=>
case
(* VAR_NAME *) p
of
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a1
,
(* TYVAR_NAME *) 'a2
]
{
(* VAR_NAME *) x1
,
(* VAR_NAME *) x2
}
=>
(* VAR_NAME *) x2
end
datatype
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
=
(* CON_NAME *) RNil
|
(* CON_NAME *) RZero
{
(* CON_NAME *) RList
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
}
|
(* CON_NAME *) ROne
{
(* TYVAR_NAME *) 'a
,
(* CON_NAME *) RList
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
}
val
(* VAR_NAME *) rlistEmpty
=
fn
[
(* TYVAR_NAME *) 'a
]
=>
(* CON_NAME *) RNil
[
(* TYVAR_NAME *) 'a
]
val
(* VAR_NAME *) rlistIsEmpty
=
fn
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) l
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
)
=>
case
(* VAR_NAME *) l
of
(* CON_NAME *) RNil
[
(* TYVAR_NAME *) 'a
]
=>
(* CON_NAME *) True
|
_
=>
(* CON_NAME *) False
end
fun
(* VAR_NAME *) rlistCons
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) x
:
(* TYVAR_NAME *) 'a
)
(
(* VAR_NAME *) l
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
)
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
=
case
(* VAR_NAME *) l
of
(* CON_NAME *) RNil
[
(* TYVAR_NAME *) 'a
]
=>
(* CON_NAME *) ROne
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) x
,
(* CON_NAME *) RNil
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
}
|
(* CON_NAME *) RZero
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) ps
}
=>
(* CON_NAME *) ROne
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) x
,
(* VAR_NAME *) ps
}
|
(* CON_NAME *) ROne
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) y
,
(* VAR_NAME *) ps
}
=>
(* CON_NAME *) RZero
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) rlistCons
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
(
(* VAR_NAME *) pair
[
(* TYVAR_NAME *) 'a
]
[
(* TYVAR_NAME *) 'a
]
(* VAR_NAME *) x
(* VAR_NAME *) y
)
(* VAR_NAME *) ps
}
end
fun
(* VAR_NAME *) rlistUncons
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) l
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
)
:
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
]
=
case
(* VAR_NAME *) l
of
(* CON_NAME *) RNil
[
(* TYVAR_NAME *) 'a
]
=>
(* VAR_NAME *) fail
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
]
]
(* STRING *) "rlistUncons: RNil"
|
(* CON_NAME *) ROne
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) x
,
(* VAR_NAME *) ps
}
=>
case
(* VAR_NAME *) ps
of
(* CON_NAME *) RNil
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
=>
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
]
{
(* VAR_NAME *) x
,
(* CON_NAME *) RNil
[
(* TYVAR_NAME *) 'a
]
}
|
_
=>
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
]
{
(* VAR_NAME *) x
,
(* CON_NAME *) RZero
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) ps
}
}
end
|
(* CON_NAME *) RZero
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) ps
}
=>
let
val
(* VAR_NAME *) xy_ps'
=
(* VAR_NAME *) rlistUncons
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
(* VAR_NAME *) ps
val
(* VAR_NAME *) xy
=
(* VAR_NAME *) fst
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
[
(* CON_NAME *) RList
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
]
(* VAR_NAME *) xy_ps'
val
(* VAR_NAME *) x
=
(* VAR_NAME *) fst
[
(* TYVAR_NAME *) 'a
]
[
(* TYVAR_NAME *) 'a
]
(* VAR_NAME *) xy
val
(* VAR_NAME *) y
=
(* VAR_NAME *) snd
[
(* TYVAR_NAME *) 'a
]
[
(* TYVAR_NAME *) 'a
]
(* VAR_NAME *) xy
val
(* VAR_NAME *) ps'
=
(* VAR_NAME *) snd
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
[
(* CON_NAME *) RList
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
]
(* VAR_NAME *) xy_ps'
in
(* VAR_NAME *) pair
[
(* TYVAR_NAME *) 'a
]
[
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
]
(* VAR_NAME *) x
(
(* CON_NAME *) ROne
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) y
,
(* VAR_NAME *) ps'
}
)
end
end
val
(* VAR_NAME *) rlistHd
=
fn
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) l
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
)
=>
(* VAR_NAME *) fst
[
(* TYVAR_NAME *) 'a
]
[
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
]
(
(* VAR_NAME *) rlistUncons
[
(* TYVAR_NAME *) 'a
]
(* VAR_NAME *) l
)
val
(* VAR_NAME *) rlistTl
=
fn
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) l
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
)
=>
(* VAR_NAME *) snd
[
(* TYVAR_NAME *) 'a
]
[
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
]
(
(* VAR_NAME *) rlistUncons
[
(* TYVAR_NAME *) 'a
]
(* VAR_NAME *) l
)
fun
(* VAR_NAME *) rlistSize
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) l
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
)
:
(* CON_NAME *) Integer
=
case
(* VAR_NAME *) l
of
(* CON_NAME *) RNil
[
(* TYVAR_NAME *) 'a
]
=>
(* INTEGER *) 0
|
(* CON_NAME *) ROne
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) x
,
(* VAR_NAME *) ps
}
=>
(* INTEGER *) 1
+
(
(* INTEGER *) 2
*
(* VAR_NAME *) rlistSize
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
(* VAR_NAME *) ps
)
|
(* CON_NAME *) RZero
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) ps
}
=>
(* INTEGER *) 2
*
(* VAR_NAME *) rlistSize
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
(* VAR_NAME *) ps
end
fun
(* VAR_NAME *) rlistLookup
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) i
:
(* CON_NAME *) Integer
)
(
(* VAR_NAME *) l
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
)
:
(* TYVAR_NAME *) 'a
=
case
(* VAR_NAME *) l
of
(* CON_NAME *) RNil
[
(* TYVAR_NAME *) 'a
]
=>
(* VAR_NAME *) fail
[
(* TYVAR_NAME *) 'a
]
(* STRING *) "rlistLookup: RNil"
|
(* CON_NAME *) ROne
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) x
,
(* VAR_NAME *) ps
}
=>
if
(* VAR_NAME *) i
==
(* INTEGER *) 0
then
(* VAR_NAME *) x
else
(* VAR_NAME *) rlistLookup
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) i
-
(* INTEGER *) 1
)
(
(* CON_NAME *) RZero
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) ps
}
)
|
(* CON_NAME *) RZero
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) ps
}
=>
let
val
(* VAR_NAME *) xy
=
(* VAR_NAME *) rlistLookup
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
(
(* VAR_NAME *) i
/
(* INTEGER *) 2
)
(* VAR_NAME *) ps
in
if
(* VAR_NAME *) i
%
(* INTEGER *) 2
==
(* INTEGER *) 0
then
(* VAR_NAME *) fst
[
(* TYVAR_NAME *) 'a
]
[
(* TYVAR_NAME *) 'a
]
(* VAR_NAME *) xy
else
(* VAR_NAME *) snd
[
(* TYVAR_NAME *) 'a
]
[
(* TYVAR_NAME *) 'a
]
(* VAR_NAME *) xy
end
end
fun
(* VAR_NAME *) rlistUpdateF
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) i
:
(* CON_NAME *) Integer
)
(
(* VAR_NAME *) f
:
(* TYVAR_NAME *) 'a
->
(* TYVAR_NAME *) 'a
)
(
(* VAR_NAME *) l
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
)
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
=
case
(* VAR_NAME *) l
of
(* CON_NAME *) RNil
[
(* TYVAR_NAME *) 'a
]
=>
(* VAR_NAME *) fail
[
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
]
(* STRING *) "rlistUpdateF: RNil"
|
(* CON_NAME *) ROne
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) x
,
(* VAR_NAME *) ps
}
=>
if
(* VAR_NAME *) i
==
(* INTEGER *) 0
then
(* CON_NAME *) ROne
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) f
(* VAR_NAME *) x
,
(* VAR_NAME *) ps
}
else
(* VAR_NAME *) rlistCons
[
(* TYVAR_NAME *) 'a
]
(* VAR_NAME *) x
(
(* VAR_NAME *) rlistUpdateF
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) i
-
(* INTEGER *) 1
)
(* VAR_NAME *) f
(
(* CON_NAME *) RZero
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) ps
}
)
)
|
(* CON_NAME *) RZero
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) ps
}
=>
let
val
(* VAR_NAME *) f'
=
fn
(
(* VAR_NAME *) xy
:
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
)
=>
let
val
(* VAR_NAME *) x
=
(* VAR_NAME *) fst
[
(* TYVAR_NAME *) 'a
]
[
(* TYVAR_NAME *) 'a
]
(* VAR_NAME *) xy
val
(* VAR_NAME *) y
=
(* VAR_NAME *) snd
[
(* TYVAR_NAME *) 'a
]
[
(* TYVAR_NAME *) 'a
]
(* VAR_NAME *) xy
in
if
(* VAR_NAME *) i
%
(* INTEGER *) 2
==
(* INTEGER *) 0
then
(* VAR_NAME *) pair
[
(* TYVAR_NAME *) 'a
]
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) f
(* VAR_NAME *) x
)
(* VAR_NAME *) y
else
(* VAR_NAME *) pair
[
(* TYVAR_NAME *) 'a
]
[
(* TYVAR_NAME *) 'a
]
(* VAR_NAME *) x
(
(* VAR_NAME *) f
(* VAR_NAME *) y
)
end
in
(* CON_NAME *) RZero
[
(* TYVAR_NAME *) 'a
]
{
(* VAR_NAME *) rlistUpdateF
[
(* CON_NAME *) Pair
[
(* TYVAR_NAME *) 'a
,
(* TYVAR_NAME *) 'a
]
]
(
(* VAR_NAME *) i
/
(* INTEGER *) 2
)
(* VAR_NAME *) f'
(* VAR_NAME *) ps
}
end
end
val
(* VAR_NAME *) rlistUpdate
=
fn
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) i
:
(* CON_NAME *) Integer
)
(
(* VAR_NAME *) y
:
(* TYVAR_NAME *) 'a
)
(
(* VAR_NAME *) l
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
)
=>
(* VAR_NAME *) rlistUpdateF
[
(* TYVAR_NAME *) 'a
]
(* VAR_NAME *) i
(
fn
(
(* VAR_NAME *) x
:
(* TYVAR_NAME *) 'a
)
=>
(* VAR_NAME *) y
)
(* VAR_NAME *) l
fun
(* VAR_NAME *) rlistAllocate
[
(* TYVAR_NAME *) 'a
]
(
(* VAR_NAME *) i
:
(* CON_NAME *) Integer
)
(
(* VAR_NAME *) v
:
(* TYVAR_NAME *) 'a
)
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
=
let
fun
(* VAR_NAME *) loop
(
(* VAR_NAME *) l
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
)
(
(* VAR_NAME *) j
:
(* CON_NAME *) Integer
)
:
(* CON_NAME *) RList
[
(* TYVAR_NAME *) 'a
]
=
if
(* VAR_NAME *) j
<
(* INTEGER *) 0
then
(* VAR_NAME *) l
else
(* VAR_NAME *) loop
(
(* VAR_NAME *) rlistCons
[
(* TYVAR_NAME *) 'a
]
(* VAR_NAME *) v
(* VAR_NAME *) l
)
(
(* VAR_NAME *) j
-
(* INTEGER *) 1
)
val
(* VAR_NAME *) l
=
(* VAR_NAME *) loop
(
(* VAR_NAME *) rlistEmpty
[
(* TYVAR_NAME *) 'a
]
)
(
(* VAR_NAME *) i
-
(* INTEGER *) 1
)
in
(* VAR_NAME *) l
end
fun
(* VAR_NAME *) intToString
(
(* VAR_NAME *) i
:
(* CON_NAME *) Integer
)
:
(* CON_NAME *) String
=
if
(* VAR_NAME *) i
<
(* INTEGER *) 0
then
(* STRING *) "~"
^
(
(* VAR_NAME *) intToString
(
~
(* VAR_NAME *) i
)
)
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 0
then
(* STRING *) "0"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 1
then
(* STRING *) "1"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 2
then
(* STRING *) "2"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 3
then
(* STRING *) "3"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 4
then
(* STRING *) "4"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 5
then
(* STRING *) "5"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 6
then
(* STRING *) "6"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 7
then
(* STRING *) "7"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 8
then
(* STRING *) "8"
else
if
(* VAR_NAME *) i
==
(* INTEGER *) 9
then
(* STRING *) "9"
else
(
(* VAR_NAME *) intToString
(
(* VAR_NAME *) i
/
(* INTEGER *) 10
)
)
^
(
(* VAR_NAME *) intToString
(
(* VAR_NAME *) i
%
(* INTEGER *) 10
)
)
val
(* VAR_NAME *) ord0
=
(* VAR_NAME *) subscript
(* STRING *) "0"
(* INTEGER *) 0
val
(* VAR_NAME *) ord9
=
(* VAR_NAME *) subscript
(* STRING *) "9"
(* INTEGER *) 0
fun
(* VAR_NAME *) charToDigit
(
(* VAR_NAME *) c
:
(* CON_NAME *) Integer
)
:
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
=
if
(* VAR_NAME *) ord0
<=
(* VAR_NAME *) c
andalso
(* VAR_NAME *) c
<=
(* VAR_NAME *) ord9
then
(* CON_NAME *) Some
[
(* CON_NAME *) Integer
]
{
(* VAR_NAME *) c
-
(* VAR_NAME *) ord0
}
else
(* CON_NAME *) None
[
(* CON_NAME *) Integer
]
fun
(* VAR_NAME *) stringToInt
(
(* VAR_NAME *) s
:
(* CON_NAME *) String
)
:
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
=
let
val
(* VAR_NAME *) sz
=
(* VAR_NAME *) size
(* VAR_NAME *) s
fun
(* VAR_NAME *) loop
(
(* VAR_NAME *) pos
:
(* CON_NAME *) Integer
)
(
(* VAR_NAME *) acc
:
(* CON_NAME *) Integer
)
:
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
=
if
(* VAR_NAME *) pos
<
(* VAR_NAME *) sz
then
case
(* VAR_NAME *) charToDigit
(
(* VAR_NAME *) subscript
(* VAR_NAME *) s
(* VAR_NAME *) pos
)
of
(* CON_NAME *) None
[
(* CON_NAME *) Integer
]
=>
(* CON_NAME *) None
[
(* CON_NAME *) Integer
]
|
(* CON_NAME *) Some
[
(* CON_NAME *) Integer
]
{
(* VAR_NAME *) i
}
=>
(* VAR_NAME *) loop
(
(* VAR_NAME *) pos
+
(* INTEGER *) 1
)
(
(* VAR_NAME *) acc
*
(* INTEGER *) 10
+
(* VAR_NAME *) i
)
end
else
(* CON_NAME *) Some
[
(* CON_NAME *) Integer
]
{
(* VAR_NAME *) acc
}
in
if
(* VAR_NAME *) sz
>
(* INTEGER *) 0
then
(* VAR_NAME *) loop
(* INTEGER *) 0
(* INTEGER *) 0
else
(* CON_NAME *) None
[
(* CON_NAME *) Integer
]
end
val
(* VAR_NAME *) fib
:
(* CON_NAME *) Integer
->
(* CON_NAME *) Integer
=
let
val
(* VAR_NAME *) a
=
(* VAR_NAME *) rlistAllocate
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
(* INTEGER *) 2
(
(* CON_NAME *) None
[
(* CON_NAME *) Integer
]
)
fun
(* VAR_NAME *) expand
(
(* VAR_NAME *) old
:
(* CON_NAME *) RList
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
)
:
(* CON_NAME *) RList
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
=
let
val
(* VAR_NAME *) new
=
(* VAR_NAME *) rlistAllocate
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
(
(* INTEGER *) 2
*
(
(* VAR_NAME *) rlistSize
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
(* VAR_NAME *) old
)
)
(
(* CON_NAME *) None
[
(* CON_NAME *) Integer
]
)
fun
(* VAR_NAME *) loop
(
(* VAR_NAME *) new
:
(* CON_NAME *) RList
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
)
(
(* VAR_NAME *) i
:
(* CON_NAME *) Integer
)
:
(* CON_NAME *) RList
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
=
if
(* VAR_NAME *) i
<
(* VAR_NAME *) rlistSize
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
(* VAR_NAME *) old
then
(* VAR_NAME *) loop
(
(* VAR_NAME *) rlistUpdate
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
(* VAR_NAME *) i
(
(* VAR_NAME *) rlistLookup
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
(* VAR_NAME *) i
(* VAR_NAME *) old
)
(* VAR_NAME *) new
)
(
(* VAR_NAME *) i
+
(* INTEGER *) 1
)
else
(* VAR_NAME *) new
in
(* VAR_NAME *) loop
(* VAR_NAME *) new
(* INTEGER *) 0
end
val
(* VAR_NAME *) a
=
(* VAR_NAME *) rlistUpdate
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
(* INTEGER *) 0
(
(* CON_NAME *) Some
[
(* CON_NAME *) Integer
]
{
(* INTEGER *) 1
}
)
(* VAR_NAME *) a
val
(* VAR_NAME *) a
=
(* VAR_NAME *) rlistUpdate
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
(* INTEGER *) 1
(
(* CON_NAME *) Some
[
(* CON_NAME *) Integer
]
{
(* INTEGER *) 1
}
)
(* VAR_NAME *) a
fun
(* VAR_NAME *) fib
(
(* VAR_NAME *) a
:
(* CON_NAME *) RList
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
)
(
(* VAR_NAME *) i
:
(* CON_NAME *) Integer
)
:
(* CON_NAME *) Pair
[
(* CON_NAME *) Integer
,
(* CON_NAME *) RList
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
]
=
if
(* VAR_NAME *) i
<
(* INTEGER *) 0
then
(* CON_NAME *) Pair
[
(* CON_NAME *) Integer
,
(* CON_NAME *) RList
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
]
{
(* INTEGER *) ~1
,
(* VAR_NAME *) a
}
else
if
(* VAR_NAME *) i
<
(* VAR_NAME *) rlistSize
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
(* VAR_NAME *) a
then
case
(* VAR_NAME *) rlistLookup
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
(* VAR_NAME *) i
(* VAR_NAME *) a
of
(* CON_NAME *) Some
[
(* CON_NAME *) Integer
]
{
(* VAR_NAME *) r
}
=>
(* CON_NAME *) Pair
[
(* CON_NAME *) Integer
,
(* CON_NAME *) RList
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
]
{
(* VAR_NAME *) r
,
(* VAR_NAME *) a
}
|
(* CON_NAME *) None
[
(* CON_NAME *) Integer
]
=>
case
(* VAR_NAME *) fib
(* VAR_NAME *) a
(
(* VAR_NAME *) i
-
(* INTEGER *) 1
)
of
(* CON_NAME *) Pair
[
(* CON_NAME *) Integer
,
(* CON_NAME *) RList
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
]
{
(* VAR_NAME *) x
,
(* VAR_NAME *) a
}
=>
case
(* VAR_NAME *) fib
(* VAR_NAME *) a
(
(* VAR_NAME *) i
-
(* INTEGER *) 2
)
of
(* CON_NAME *) Pair
[
(* CON_NAME *) Integer
,
(* CON_NAME *) RList
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
]
{
(* VAR_NAME *) y
,
(* VAR_NAME *) a
}
=>
let
val
(* VAR_NAME *) r
=
(* VAR_NAME *) x
+
(* VAR_NAME *) y
val
(* VAR_NAME *) a
=
(* VAR_NAME *) rlistUpdate
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
(* VAR_NAME *) i
(
(* CON_NAME *) Some
[
(* CON_NAME *) Integer
]
{
(* VAR_NAME *) r
}
)
(* VAR_NAME *) a
in
(* CON_NAME *) Pair
[
(* CON_NAME *) Integer
,
(* CON_NAME *) RList
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
]
{
(* VAR_NAME *) r
,
(* VAR_NAME *) a
}
end
end
end
end
else
(* VAR_NAME *) fib
(
(* VAR_NAME *) expand
(* VAR_NAME *) a
)
(* VAR_NAME *) i
in
fn
(
(* VAR_NAME *) i
:
(* CON_NAME *) Integer
)
=>
(* VAR_NAME *) fst
[
(* CON_NAME *) Integer
]
[
(* CON_NAME *) RList
[
(* CON_NAME *) Option
[
(* CON_NAME *) Integer
]
]
]
(
(* VAR_NAME *) fib
(* VAR_NAME *) a
(* VAR_NAME *) i
)
end
val
(* VAR_NAME *) s
=
if
(* VAR_NAME *) argc
(* CON_NAME *) Unit
>
(* INTEGER *) 1
then
(* VAR_NAME *) arg
(* INTEGER *) 1
else
(* STRING *) "42"
;
case
(* VAR_NAME *) stringToInt
(* VAR_NAME *) s
of
(* CON_NAME *) None
[
(* CON_NAME *) Integer
]
=>
(* CON_NAME *) Unit
|
(* CON_NAME *) Some
[
(* CON_NAME *) Integer
]
{
(* VAR_NAME *) i
}
=>
(
(* VAR_NAME *) print
(
(* STRING *) "fib("
^
(
(* VAR_NAME *) intToString
(* VAR_NAME *) i
)
^
(* STRING *) ") = "
^
(
(* VAR_NAME *) intToString
(
(* VAR_NAME *) fib
(* VAR_NAME *) i
)
)
^
(* STRING *) "\n"
)
)
end
