datatype Option ['a] = None | Some {'a}

(*****)

fun intToString (i:Integer) : String =
   if i < 0 then "~" ^ (intToString (~i))
   else if i == 0 then "0"
   else if i == 1 then "1"
   else if i == 2 then "2"
   else if i == 3 then "3"
   else if i == 4 then "4"
   else if i == 5 then "5"
   else if i == 6 then "6"
   else if i == 7 then "7"
   else if i == 8 then "8"
   else if i == 9 then "9"
   else (intToString (i / 10)) ^ (intToString (i % 10))

val ord0 = subscript "0" 0
val ord9 = subscript "9" 0

fun charToDigit (c: Integer) : Option [Integer] =
  if ord0 <= c andalso c <= ord9
    then Some [Integer] {c - ord0}
    else None [Integer]

fun stringToInt (s : String) : Option [Integer] =
  let
    val sz = size s
    fun loop (pos: Integer) (acc: Integer) : Option [Integer] =
      if pos < sz
        then case charToDigit (subscript s pos) of
                None [Integer] => None [Integer]
              | Some [Integer] {i} => loop (pos + 1) (acc * 10 + i)
             end
      else Some [Integer] {acc}
  in
    if sz > 0
      then loop 0 0
    else None [Integer]
  end

(*****)

val fib : Integer -> Integer =
  let
    val a = array [Array [Option [Integer]]] 1 (array [Option [Integer]] 2 (None [Integer]))
    fun expandArray (u : Unit) : Unit =
      let
        val old = a ! 0
        val new = array [Option [Integer]] (2 * # old) (None [Integer])
        fun loop (i:Integer) : Unit =
          if i < # old
            then (new ! i := old ! i ; loop (i + 1))
          else Unit
        val _ = loop 0
        val _ = a ! 0 := new
      in
        Unit
      end
    val _ = a ! 0 ! 0 := Some [Integer] {1}
    val _ = a ! 0 ! 1 := Some [Integer] {1}
    fun fib (i:Integer) : Integer =
      if i < 0
        then ~1
      else if i < # (a ! 0)
        then case a ! 0 ! i of
                Some [Integer] {r} => r
              | None [Integer] => 
                  let
                    val x = fib (i - 1)
                    val y = fib (i - 2)
                    val r = x + y
                    val _ = a ! 0 ! i := Some [Integer] {r}
(*
                    val _ = print ("fib(" ^ (intToString i) ^ ") = " ^ (intToString r) ^ "\n")
*)
                  in
                    r
                  end
             end
      else (expandArray Unit; fib i)
  in
    fib
  end

val s =
  if argc Unit > 1
     then arg 1
  else "42"

;

case stringToInt s of
   None [Integer] => Unit
 | Some [Integer] {i} => (print ("fib(" ^ (intToString i) ^ ") = " ^ (intToString (fib i)) ^ "\n"))
end
